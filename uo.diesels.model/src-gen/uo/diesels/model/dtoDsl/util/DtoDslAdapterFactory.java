/**
 * generated by Xtext 2.9.0
 */
package uo.diesels.model.dtoDsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import uo.diesels.model.dtoDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see uo.diesels.model.dtoDsl.DtoDslPackage
 * @generated
 */
public class DtoDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DtoDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DtoDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DtoDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DtoDslSwitch<Adapter> modelSwitch =
    new DtoDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseDto(Dto object)
      {
        return createDtoAdapter();
      }
      @Override
      public Adapter caseDtoEntity(DtoEntity object)
      {
        return createDtoEntityAdapter();
      }
      @Override
      public Adapter caseDtoFor(DtoFor object)
      {
        return createDtoForAdapter();
      }
      @Override
      public Adapter caseDefDtoAttribute(DefDtoAttribute object)
      {
        return createDefDtoAttributeAdapter();
      }
      @Override
      public Adapter caseDefDtoSimpleVariable(DefDtoSimpleVariable object)
      {
        return createDefDtoSimpleVariableAdapter();
      }
      @Override
      public Adapter caseDefDtoModelTypeVariable(DefDtoModelTypeVariable object)
      {
        return createDefDtoModelTypeVariableAdapter();
      }
      @Override
      public Adapter caseDefDtoCollectionTypeAttribute(DefDtoCollectionTypeAttribute object)
      {
        return createDefDtoCollectionTypeAttributeAdapter();
      }
      @Override
      public Adapter caseDefDtoModelTypeCollectionVariable(DefDtoModelTypeCollectionVariable object)
      {
        return createDefDtoModelTypeCollectionVariableAdapter();
      }
      @Override
      public Adapter caseDefDtoSimpleTypeCollectionVariable(DefDtoSimpleTypeCollectionVariable object)
      {
        return createDefDtoSimpleTypeCollectionVariableAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.dtoDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.dtoDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.dtoDsl.Dto <em>Dto</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.dtoDsl.Dto
   * @generated
   */
  public Adapter createDtoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.dtoDsl.DtoEntity <em>Dto Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.dtoDsl.DtoEntity
   * @generated
   */
  public Adapter createDtoEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.dtoDsl.DtoFor <em>Dto For</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.dtoDsl.DtoFor
   * @generated
   */
  public Adapter createDtoForAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.dtoDsl.DefDtoAttribute <em>Def Dto Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.dtoDsl.DefDtoAttribute
   * @generated
   */
  public Adapter createDefDtoAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.dtoDsl.DefDtoSimpleVariable <em>Def Dto Simple Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.dtoDsl.DefDtoSimpleVariable
   * @generated
   */
  public Adapter createDefDtoSimpleVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.dtoDsl.DefDtoModelTypeVariable <em>Def Dto Model Type Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.dtoDsl.DefDtoModelTypeVariable
   * @generated
   */
  public Adapter createDefDtoModelTypeVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.dtoDsl.DefDtoCollectionTypeAttribute <em>Def Dto Collection Type Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.dtoDsl.DefDtoCollectionTypeAttribute
   * @generated
   */
  public Adapter createDefDtoCollectionTypeAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.dtoDsl.DefDtoModelTypeCollectionVariable <em>Def Dto Model Type Collection Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.dtoDsl.DefDtoModelTypeCollectionVariable
   * @generated
   */
  public Adapter createDefDtoModelTypeCollectionVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.dtoDsl.DefDtoSimpleTypeCollectionVariable <em>Def Dto Simple Type Collection Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.dtoDsl.DefDtoSimpleTypeCollectionVariable
   * @generated
   */
  public Adapter createDefDtoSimpleTypeCollectionVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DtoDslAdapterFactory
