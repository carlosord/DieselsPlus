/*
 * generated by Xtext 2.10.0
 */
package uo.diesels.model.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BusinessDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.Model");
		private final Assignment cServicesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cServicesServiceParserRuleCall_0 = (RuleCall)cServicesAssignment.eContents().get(0);
		
		//Model:
		//	services+=Service*;
		@Override public ParserRule getRule() { return rule; }
		
		//services+=Service*
		public Assignment getServicesAssignment() { return cServicesAssignment; }
		
		//Service
		public RuleCall getServicesServiceParserRuleCall_0() { return cServicesServiceParserRuleCall_0; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodsServiceMethodParserRuleCall_3_0 = (RuleCall)cMethodsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Service:
		//	'Service' name=ID '{'
		//	methods+=ServiceMethod+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Service' name=ID '{' methods+=ServiceMethod+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//methods+=ServiceMethod+
		public Assignment getMethodsAssignment_3() { return cMethodsAssignment_3; }
		
		//ServiceMethod
		public RuleCall getMethodsServiceMethodParserRuleCall_3_0() { return cMethodsServiceMethodParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ServiceMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.ServiceMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJpaMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFinderUserMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ServiceMethod:
		//	JpaMethod | FinderUserMethod;
		@Override public ParserRule getRule() { return rule; }
		
		//JpaMethod | FinderUserMethod
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JpaMethod
		public RuleCall getJpaMethodParserRuleCall_0() { return cJpaMethodParserRuleCall_0; }
		
		//FinderUserMethod
		public RuleCall getFinderUserMethodParserRuleCall_1() { return cFinderUserMethodParserRuleCall_1; }
	}
	public class JpaMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.JpaMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeywordAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cKeywordAlternatives_3_0 = (Alternatives)cKeywordAssignment_3.eContents().get(0);
		private final Keyword cKeywordSaveKeyword_3_0_0 = (Keyword)cKeywordAlternatives_3_0.eContents().get(0);
		private final Keyword cKeywordUpdateKeyword_3_0_1 = (Keyword)cKeywordAlternatives_3_0.eContents().get(1);
		private final Keyword cKeywordDeleteKeyword_3_0_2 = (Keyword)cKeywordAlternatives_3_0.eContents().get(2);
		private final Keyword cKeywordFindKeyword_3_0_3 = (Keyword)cKeywordAlternatives_3_0.eContents().get(3);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEntityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cEntityEntityCrossReference_5_0 = (CrossReference)cEntityAssignment_5.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_5_0_1 = (RuleCall)cEntityEntityCrossReference_5_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Métodos Jpa
		//JpaMethod:
		//	name=ID '(' ')' keyword=('save' | 'update' | 'delete' | 'find') '<' entity=[Model::Entity] '>';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' ')' keyword=('save' | 'update' | 'delete' | 'find') '<' entity=[Model::Entity] '>'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//keyword=('save' | 'update' | 'delete' | 'find')
		public Assignment getKeywordAssignment_3() { return cKeywordAssignment_3; }
		
		//('save' | 'update' | 'delete' | 'find')
		public Alternatives getKeywordAlternatives_3_0() { return cKeywordAlternatives_3_0; }
		
		//'save'
		public Keyword getKeywordSaveKeyword_3_0_0() { return cKeywordSaveKeyword_3_0_0; }
		
		//'update'
		public Keyword getKeywordUpdateKeyword_3_0_1() { return cKeywordUpdateKeyword_3_0_1; }
		
		//'delete'
		public Keyword getKeywordDeleteKeyword_3_0_2() { return cKeywordDeleteKeyword_3_0_2; }
		
		//'find'
		public Keyword getKeywordFindKeyword_3_0_3() { return cKeywordFindKeyword_3_0_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }
		
		//entity=[Model::Entity]
		public Assignment getEntityAssignment_5() { return cEntityAssignment_5; }
		
		//[Model::Entity]
		public CrossReference getEntityEntityCrossReference_5_0() { return cEntityEntityCrossReference_5_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_5_0_1() { return cEntityEntityIDTerminalRuleCall_5_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
	}
	public class FinderUserMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.FinderUserMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cMethodSimpleReturnParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMethodAllModelReturnParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cMethodDtoReturnParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cMethodCollectionReturnParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cKeywordAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cKeywordFinderKeyword_1_0_0 = (Keyword)cKeywordAssignment_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFinderAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cFinderFinderCrossReference_1_2_0 = (CrossReference)cFinderAssignment_1_2.eContents().get(0);
		private final RuleCall cFinderFinderIDTerminalRuleCall_1_2_0_1 = (RuleCall)cFinderFinderCrossReference_1_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// Métodos Finder y User
		//FinderUserMethod:
		//	(MethodSimpleReturn | MethodAllModelReturn | MethodDtoReturn | MethodCollectionReturn) (keyword='finder' '<'
		//	finder=[Persistence::Finder] '>')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(MethodSimpleReturn | MethodAllModelReturn | MethodDtoReturn | MethodCollectionReturn) (keyword='finder' '<'
		//finder=[Persistence::Finder] '>')?
		public Group getGroup() { return cGroup; }
		
		//(MethodSimpleReturn | MethodAllModelReturn | MethodDtoReturn | MethodCollectionReturn)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//MethodSimpleReturn
		public RuleCall getMethodSimpleReturnParserRuleCall_0_0() { return cMethodSimpleReturnParserRuleCall_0_0; }
		
		//MethodAllModelReturn
		public RuleCall getMethodAllModelReturnParserRuleCall_0_1() { return cMethodAllModelReturnParserRuleCall_0_1; }
		
		//MethodDtoReturn
		public RuleCall getMethodDtoReturnParserRuleCall_0_2() { return cMethodDtoReturnParserRuleCall_0_2; }
		
		//MethodCollectionReturn
		public RuleCall getMethodCollectionReturnParserRuleCall_0_3() { return cMethodCollectionReturnParserRuleCall_0_3; }
		
		//(keyword='finder' '<' finder=[Persistence::Finder] '>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//keyword='finder'
		public Assignment getKeywordAssignment_1_0() { return cKeywordAssignment_1_0; }
		
		//'finder'
		public Keyword getKeywordFinderKeyword_1_0_0() { return cKeywordFinderKeyword_1_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }
		
		//finder=[Persistence::Finder]
		public Assignment getFinderAssignment_1_2() { return cFinderAssignment_1_2; }
		
		//[Persistence::Finder]
		public CrossReference getFinderFinderCrossReference_1_2_0() { return cFinderFinderCrossReference_1_2_0; }
		
		//ID
		public RuleCall getFinderFinderIDTerminalRuleCall_1_2_0_1() { return cFinderFinderIDTerminalRuleCall_1_2_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}
	public class MethodSimpleReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.MethodSimpleReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturnTypeSimpleReturnTypeParserRuleCall_0_0 = (RuleCall)cReturnTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersDefVariableParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersDefVariableParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MethodSimpleReturn:
		//	returnType=SimpleReturnType name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//returnType=SimpleReturnType name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//returnType=SimpleReturnType
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }
		
		//SimpleReturnType
		public RuleCall getReturnTypeSimpleReturnTypeParserRuleCall_0_0() { return cReturnTypeSimpleReturnTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=DefVariable (',' parameters+=DefVariable)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=DefVariable
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//DefVariable
		public RuleCall getParametersDefVariableParserRuleCall_3_0_0() { return cParametersDefVariableParserRuleCall_3_0_0; }
		
		//(',' parameters+=DefVariable)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=DefVariable
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//DefVariable
		public RuleCall getParametersDefVariableParserRuleCall_3_1_1_0() { return cParametersDefVariableParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MethodAllModelReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.MethodAllModelReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReturnTypeAllModelTypeCrossReference_0_0 = (CrossReference)cReturnTypeAssignment_0.eContents().get(0);
		private final RuleCall cReturnTypeAllModelTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cReturnTypeAllModelTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersDefVariableParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersDefVariableParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MethodAllModelReturn:
		//	returnType=[Model::AllModelType] name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//returnType=[Model::AllModelType] name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//returnType=[Model::AllModelType]
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }
		
		//[Model::AllModelType]
		public CrossReference getReturnTypeAllModelTypeCrossReference_0_0() { return cReturnTypeAllModelTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getReturnTypeAllModelTypeIDTerminalRuleCall_0_0_1() { return cReturnTypeAllModelTypeIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=DefVariable (',' parameters+=DefVariable)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=DefVariable
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//DefVariable
		public RuleCall getParametersDefVariableParserRuleCall_3_0_0() { return cParametersDefVariableParserRuleCall_3_0_0; }
		
		//(',' parameters+=DefVariable)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=DefVariable
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//DefVariable
		public RuleCall getParametersDefVariableParserRuleCall_3_1_1_0() { return cParametersDefVariableParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MethodDtoReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.MethodDtoReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReturnTypeDtoCrossReference_1_0 = (CrossReference)cReturnTypeAssignment_1.eContents().get(0);
		private final RuleCall cReturnTypeDtoIDTerminalRuleCall_1_0_1 = (RuleCall)cReturnTypeDtoCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersDefVariableParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersDefVariableParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MethodDtoReturn:
		//	'#' returnType=[Dto::Dto] name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'#' returnType=[Dto::Dto] name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//returnType=[Dto::Dto]
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//[Dto::Dto]
		public CrossReference getReturnTypeDtoCrossReference_1_0() { return cReturnTypeDtoCrossReference_1_0; }
		
		//ID
		public RuleCall getReturnTypeDtoIDTerminalRuleCall_1_0_1() { return cReturnTypeDtoIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=DefVariable (',' parameters+=DefVariable)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=DefVariable
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//DefVariable
		public RuleCall getParametersDefVariableParserRuleCall_4_0_0() { return cParametersDefVariableParserRuleCall_4_0_0; }
		
		//(',' parameters+=DefVariable)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=DefVariable
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//DefVariable
		public RuleCall getParametersDefVariableParserRuleCall_4_1_1_0() { return cParametersDefVariableParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class MethodCollectionReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.MethodCollectionReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturnTypeCollectionReturnTypeParserRuleCall_0_0 = (RuleCall)cReturnTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersDefVariableParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersDefVariableParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MethodCollectionReturn:
		//	returnType=CollectionReturnType name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//returnType=CollectionReturnType name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//returnType=CollectionReturnType
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }
		
		//CollectionReturnType
		public RuleCall getReturnTypeCollectionReturnTypeParserRuleCall_0_0() { return cReturnTypeCollectionReturnTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=DefVariable (',' parameters+=DefVariable)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=DefVariable
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//DefVariable
		public RuleCall getParametersDefVariableParserRuleCall_3_0_0() { return cParametersDefVariableParserRuleCall_3_0_0; }
		
		//(',' parameters+=DefVariable)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=DefVariable
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//DefVariable
		public RuleCall getParametersDefVariableParserRuleCall_3_1_1_0() { return cParametersDefVariableParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DefVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.DefVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefSimpleVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefAllModelTypeVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefDtoTypeVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefCollectionTypeVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Variables soportadas para los métodos
		//DefVariable:
		//	DefSimpleVariable | DefAllModelTypeVariable | DefDtoTypeVariable | DefCollectionTypeVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//DefSimpleVariable | DefAllModelTypeVariable | DefDtoTypeVariable | DefCollectionTypeVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefSimpleVariable
		public RuleCall getDefSimpleVariableParserRuleCall_0() { return cDefSimpleVariableParserRuleCall_0; }
		
		//DefAllModelTypeVariable
		public RuleCall getDefAllModelTypeVariableParserRuleCall_1() { return cDefAllModelTypeVariableParserRuleCall_1; }
		
		//DefDtoTypeVariable
		public RuleCall getDefDtoTypeVariableParserRuleCall_2() { return cDefDtoTypeVariableParserRuleCall_2; }
		
		//DefCollectionTypeVariable
		public RuleCall getDefCollectionTypeVariableParserRuleCall_3() { return cDefCollectionTypeVariableParserRuleCall_3; }
	}
	public class DefAllModelTypeVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.DefAllModelTypeVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeAllModelTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeAllModelTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeAllModelTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DefAllModelTypeVariable:
		//	type=[Model::AllModelType] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Model::AllModelType] name=ID
		public Group getGroup() { return cGroup; }
		
		//type=[Model::AllModelType]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[Model::AllModelType]
		public CrossReference getTypeAllModelTypeCrossReference_0_0() { return cTypeAllModelTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeAllModelTypeIDTerminalRuleCall_0_0_1() { return cTypeAllModelTypeIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DefDtoTypeVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.DefDtoTypeVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeDtoCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeDtoIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeDtoCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//DefDtoTypeVariable:
		//	'#' type=[Dto::Dto] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' type=[Dto::Dto] name=ID
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//type=[Dto::Dto]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Dto::Dto]
		public CrossReference getTypeDtoCrossReference_1_0() { return cTypeDtoCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeDtoIDTerminalRuleCall_1_0_1() { return cTypeDtoIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class DefSimpleVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.DefSimpleVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DefSimpleVariable:
		//	type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DefCollectionTypeVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.DefCollectionTypeVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefAllModelTypeCollectionVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefDtoTypeCollectionVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefSimpleTypeCollectionVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DefCollectionTypeVariable:
		//	DefAllModelTypeCollectionVariable | DefDtoTypeCollectionVariable | DefSimpleTypeCollectionVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//DefAllModelTypeCollectionVariable | DefDtoTypeCollectionVariable | DefSimpleTypeCollectionVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefAllModelTypeCollectionVariable
		public RuleCall getDefAllModelTypeCollectionVariableParserRuleCall_0() { return cDefAllModelTypeCollectionVariableParserRuleCall_0; }
		
		//DefDtoTypeCollectionVariable
		public RuleCall getDefDtoTypeCollectionVariableParserRuleCall_1() { return cDefDtoTypeCollectionVariableParserRuleCall_1; }
		
		//DefSimpleTypeCollectionVariable
		public RuleCall getDefSimpleTypeCollectionVariableParserRuleCall_2() { return cDefSimpleTypeCollectionVariableParserRuleCall_2; }
	}
	public class DefAllModelTypeCollectionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.DefAllModelTypeCollectionVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAllModelTypeCollectionParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DefAllModelTypeCollectionVariable:
		//	type=AllModelTypeCollection name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=AllModelTypeCollection name=ID
		public Group getGroup() { return cGroup; }
		
		//type=AllModelTypeCollection
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//AllModelTypeCollection
		public RuleCall getTypeAllModelTypeCollectionParserRuleCall_0_0() { return cTypeAllModelTypeCollectionParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DefSimpleTypeCollectionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.DefSimpleTypeCollectionVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSimpleTypeCollectionParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DefSimpleTypeCollectionVariable:
		//	type=SimpleTypeCollection name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=SimpleTypeCollection name=ID
		public Group getGroup() { return cGroup; }
		
		//type=SimpleTypeCollection
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//SimpleTypeCollection
		public RuleCall getTypeSimpleTypeCollectionParserRuleCall_0_0() { return cTypeSimpleTypeCollectionParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DefDtoTypeCollectionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.DefDtoTypeCollectionVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDtoTypeCollectionParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DefDtoTypeCollectionVariable:
		//	type=DtoTypeCollection name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=DtoTypeCollection name=ID
		public Group getGroup() { return cGroup; }
		
		//type=DtoTypeCollection
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//DtoTypeCollection
		public RuleCall getTypeDtoTypeCollectionParserRuleCall_0_0() { return cTypeDtoTypeCollectionParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CollectionReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.CollectionReturnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllModelTypeCollectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDtoTypeCollectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleTypeCollectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Tipos de colección
		//CollectionReturnType:
		//	AllModelTypeCollection | DtoTypeCollection | SimpleTypeCollection;
		@Override public ParserRule getRule() { return rule; }
		
		//AllModelTypeCollection | DtoTypeCollection | SimpleTypeCollection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AllModelTypeCollection
		public RuleCall getAllModelTypeCollectionParserRuleCall_0() { return cAllModelTypeCollectionParserRuleCall_0; }
		
		//DtoTypeCollection
		public RuleCall getDtoTypeCollectionParserRuleCall_1() { return cDtoTypeCollectionParserRuleCall_1; }
		
		//SimpleTypeCollection
		public RuleCall getSimpleTypeCollectionParserRuleCall_2() { return cSimpleTypeCollectionParserRuleCall_2; }
	}
	public class AllModelTypeCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.AllModelTypeCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCollectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCollectionAlternatives_0_0 = (Alternatives)cCollectionAssignment_0.eContents().get(0);
		private final RuleCall cCollectionLISTTerminalRuleCall_0_0_0 = (RuleCall)cCollectionAlternatives_0_0.eContents().get(0);
		private final RuleCall cCollectionSETTerminalRuleCall_0_0_1 = (RuleCall)cCollectionAlternatives_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeAllModelTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeAllModelTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeAllModelTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AllModelTypeCollection:
		//	collection=(LIST | SET) '<' type=[Model::AllModelType] '>';
		@Override public ParserRule getRule() { return rule; }
		
		//collection=(LIST | SET) '<' type=[Model::AllModelType] '>'
		public Group getGroup() { return cGroup; }
		
		//collection=(LIST | SET)
		public Assignment getCollectionAssignment_0() { return cCollectionAssignment_0; }
		
		//(LIST | SET)
		public Alternatives getCollectionAlternatives_0_0() { return cCollectionAlternatives_0_0; }
		
		//LIST
		public RuleCall getCollectionLISTTerminalRuleCall_0_0_0() { return cCollectionLISTTerminalRuleCall_0_0_0; }
		
		//SET
		public RuleCall getCollectionSETTerminalRuleCall_0_0_1() { return cCollectionSETTerminalRuleCall_0_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//type=[Model::AllModelType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Model::AllModelType]
		public CrossReference getTypeAllModelTypeCrossReference_2_0() { return cTypeAllModelTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeAllModelTypeIDTerminalRuleCall_2_0_1() { return cTypeAllModelTypeIDTerminalRuleCall_2_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class DtoTypeCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.DtoTypeCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCollectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCollectionAlternatives_0_0 = (Alternatives)cCollectionAssignment_0.eContents().get(0);
		private final RuleCall cCollectionLISTTerminalRuleCall_0_0_0 = (RuleCall)cCollectionAlternatives_0_0.eContents().get(0);
		private final RuleCall cCollectionSETTerminalRuleCall_0_0_1 = (RuleCall)cCollectionAlternatives_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeDtoCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDtoIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeDtoCrossReference_3_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DtoTypeCollection:
		//	collection=(LIST | SET) '<' '#' type=[Dto::Dto] '>';
		@Override public ParserRule getRule() { return rule; }
		
		//collection=(LIST | SET) '<' '#' type=[Dto::Dto] '>'
		public Group getGroup() { return cGroup; }
		
		//collection=(LIST | SET)
		public Assignment getCollectionAssignment_0() { return cCollectionAssignment_0; }
		
		//(LIST | SET)
		public Alternatives getCollectionAlternatives_0_0() { return cCollectionAlternatives_0_0; }
		
		//LIST
		public RuleCall getCollectionLISTTerminalRuleCall_0_0_0() { return cCollectionLISTTerminalRuleCall_0_0_0; }
		
		//SET
		public RuleCall getCollectionSETTerminalRuleCall_0_0_1() { return cCollectionSETTerminalRuleCall_0_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }
		
		//type=[Dto::Dto]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[Dto::Dto]
		public CrossReference getTypeDtoCrossReference_3_0() { return cTypeDtoCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeDtoIDTerminalRuleCall_3_0_1() { return cTypeDtoIDTerminalRuleCall_3_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class SimpleTypeCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.SimpleTypeCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCollectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCollectionAlternatives_0_0 = (Alternatives)cCollectionAssignment_0.eContents().get(0);
		private final RuleCall cCollectionLISTTerminalRuleCall_0_0_0 = (RuleCall)cCollectionAlternatives_0_0.eContents().get(0);
		private final RuleCall cCollectionSETTerminalRuleCall_0_0_1 = (RuleCall)cCollectionAlternatives_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleTypeCollection:
		//	collection=(LIST | SET) '<' type=Type '>';
		@Override public ParserRule getRule() { return rule; }
		
		//collection=(LIST | SET) '<' type=Type '>'
		public Group getGroup() { return cGroup; }
		
		//collection=(LIST | SET)
		public Assignment getCollectionAssignment_0() { return cCollectionAssignment_0; }
		
		//(LIST | SET)
		public Alternatives getCollectionAlternatives_0_0() { return cCollectionAlternatives_0_0; }
		
		//LIST
		public RuleCall getCollectionLISTTerminalRuleCall_0_0_0() { return cCollectionLISTTerminalRuleCall_0_0_0; }
		
		//SET
		public RuleCall getCollectionSETTerminalRuleCall_0_0_1() { return cCollectionSETTerminalRuleCall_0_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class SimpleReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.SimpleReturnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVOIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Tipos simples (básicos) y complejos (Date) soportados
		//SimpleReturnType:
		//	Type | VOID;
		@Override public ParserRule getRule() { return rule; }
		
		//Type | VOID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//VOID
		public RuleCall getVOIDTerminalRuleCall_1() { return cVOIDTerminalRuleCall_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	BasicType | ComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicType | ComplexType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }
		
		//ComplexType
		public RuleCall getComplexTypeParserRuleCall_1() { return cComplexTypeParserRuleCall_1; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTYPE_INTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTYPE_DOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTYPE_FLOATTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTYPE_LONGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTYPE_CHARTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTYPE_STRINGTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTYPE_BOOLEANTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTYPE_BINARYTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//BasicType:
		//	TYPE_INT | TYPE_DOUBLE | TYPE_FLOAT | TYPE_LONG | TYPE_CHAR | TYPE_STRING | TYPE_BOOLEAN | TYPE_BINARY;
		@Override public ParserRule getRule() { return rule; }
		
		//TYPE_INT | TYPE_DOUBLE | TYPE_FLOAT | TYPE_LONG | TYPE_CHAR | TYPE_STRING | TYPE_BOOLEAN | TYPE_BINARY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TYPE_INT
		public RuleCall getTYPE_INTTerminalRuleCall_0() { return cTYPE_INTTerminalRuleCall_0; }
		
		//TYPE_DOUBLE
		public RuleCall getTYPE_DOUBLETerminalRuleCall_1() { return cTYPE_DOUBLETerminalRuleCall_1; }
		
		//TYPE_FLOAT
		public RuleCall getTYPE_FLOATTerminalRuleCall_2() { return cTYPE_FLOATTerminalRuleCall_2; }
		
		//TYPE_LONG
		public RuleCall getTYPE_LONGTerminalRuleCall_3() { return cTYPE_LONGTerminalRuleCall_3; }
		
		//TYPE_CHAR
		public RuleCall getTYPE_CHARTerminalRuleCall_4() { return cTYPE_CHARTerminalRuleCall_4; }
		
		//TYPE_STRING
		public RuleCall getTYPE_STRINGTerminalRuleCall_5() { return cTYPE_STRINGTerminalRuleCall_5; }
		
		//TYPE_BOOLEAN
		public RuleCall getTYPE_BOOLEANTerminalRuleCall_6() { return cTYPE_BOOLEANTerminalRuleCall_6; }
		
		//TYPE_BINARY
		public RuleCall getTYPE_BINARYTerminalRuleCall_7() { return cTYPE_BINARYTerminalRuleCall_7; }
	}
	public class ComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.ComplexType");
		private final RuleCall cDATETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ComplexType:
		//	DATE;
		@Override public ParserRule getRule() { return rule; }
		
		//DATE
		public RuleCall getDATETerminalRuleCall() { return cDATETerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final ServiceElements pService;
	private final ServiceMethodElements pServiceMethod;
	private final JpaMethodElements pJpaMethod;
	private final FinderUserMethodElements pFinderUserMethod;
	private final MethodSimpleReturnElements pMethodSimpleReturn;
	private final MethodAllModelReturnElements pMethodAllModelReturn;
	private final MethodDtoReturnElements pMethodDtoReturn;
	private final MethodCollectionReturnElements pMethodCollectionReturn;
	private final DefVariableElements pDefVariable;
	private final DefAllModelTypeVariableElements pDefAllModelTypeVariable;
	private final DefDtoTypeVariableElements pDefDtoTypeVariable;
	private final DefSimpleVariableElements pDefSimpleVariable;
	private final DefCollectionTypeVariableElements pDefCollectionTypeVariable;
	private final DefAllModelTypeCollectionVariableElements pDefAllModelTypeCollectionVariable;
	private final DefSimpleTypeCollectionVariableElements pDefSimpleTypeCollectionVariable;
	private final DefDtoTypeCollectionVariableElements pDefDtoTypeCollectionVariable;
	private final CollectionReturnTypeElements pCollectionReturnType;
	private final AllModelTypeCollectionElements pAllModelTypeCollection;
	private final DtoTypeCollectionElements pDtoTypeCollection;
	private final SimpleTypeCollectionElements pSimpleTypeCollection;
	private final SimpleReturnTypeElements pSimpleReturnType;
	private final TypeElements pType;
	private final BasicTypeElements pBasicType;
	private final ComplexTypeElements pComplexType;
	private final TerminalRule tLIST;
	private final TerminalRule tSET;
	private final TerminalRule tDATE;
	private final TerminalRule tVOID;
	private final TerminalRule tTYPE_INT;
	private final TerminalRule tTYPE_LONG;
	private final TerminalRule tTYPE_DOUBLE;
	private final TerminalRule tTYPE_FLOAT;
	private final TerminalRule tTYPE_CHAR;
	private final TerminalRule tTYPE_STRING;
	private final TerminalRule tTYPE_BOOLEAN;
	private final TerminalRule tTYPE_BINARY;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BusinessDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pService = new ServiceElements();
		this.pServiceMethod = new ServiceMethodElements();
		this.pJpaMethod = new JpaMethodElements();
		this.pFinderUserMethod = new FinderUserMethodElements();
		this.pMethodSimpleReturn = new MethodSimpleReturnElements();
		this.pMethodAllModelReturn = new MethodAllModelReturnElements();
		this.pMethodDtoReturn = new MethodDtoReturnElements();
		this.pMethodCollectionReturn = new MethodCollectionReturnElements();
		this.pDefVariable = new DefVariableElements();
		this.pDefAllModelTypeVariable = new DefAllModelTypeVariableElements();
		this.pDefDtoTypeVariable = new DefDtoTypeVariableElements();
		this.pDefSimpleVariable = new DefSimpleVariableElements();
		this.pDefCollectionTypeVariable = new DefCollectionTypeVariableElements();
		this.pDefAllModelTypeCollectionVariable = new DefAllModelTypeCollectionVariableElements();
		this.pDefSimpleTypeCollectionVariable = new DefSimpleTypeCollectionVariableElements();
		this.pDefDtoTypeCollectionVariable = new DefDtoTypeCollectionVariableElements();
		this.pCollectionReturnType = new CollectionReturnTypeElements();
		this.pAllModelTypeCollection = new AllModelTypeCollectionElements();
		this.pDtoTypeCollection = new DtoTypeCollectionElements();
		this.pSimpleTypeCollection = new SimpleTypeCollectionElements();
		this.pSimpleReturnType = new SimpleReturnTypeElements();
		this.pType = new TypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pComplexType = new ComplexTypeElements();
		this.tLIST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.LIST");
		this.tSET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.SET");
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.DATE");
		this.tVOID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.VOID");
		this.tTYPE_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.TYPE_INT");
		this.tTYPE_LONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.TYPE_LONG");
		this.tTYPE_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.TYPE_DOUBLE");
		this.tTYPE_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.TYPE_FLOAT");
		this.tTYPE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.TYPE_CHAR");
		this.tTYPE_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.TYPE_STRING");
		this.tTYPE_BOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.TYPE_BOOLEAN");
		this.tTYPE_BINARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.BusinessDsl.TYPE_BINARY");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uo.diesels.model.BusinessDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	services+=Service*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Service:
	//	'Service' name=ID '{'
	//	methods+=ServiceMethod+
	//	'}';
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//ServiceMethod:
	//	JpaMethod | FinderUserMethod;
	public ServiceMethodElements getServiceMethodAccess() {
		return pServiceMethod;
	}
	
	public ParserRule getServiceMethodRule() {
		return getServiceMethodAccess().getRule();
	}
	
	//// Métodos Jpa
	//JpaMethod:
	//	name=ID '(' ')' keyword=('save' | 'update' | 'delete' | 'find') '<' entity=[Model::Entity] '>';
	public JpaMethodElements getJpaMethodAccess() {
		return pJpaMethod;
	}
	
	public ParserRule getJpaMethodRule() {
		return getJpaMethodAccess().getRule();
	}
	
	//// Métodos Finder y User
	//FinderUserMethod:
	//	(MethodSimpleReturn | MethodAllModelReturn | MethodDtoReturn | MethodCollectionReturn) (keyword='finder' '<'
	//	finder=[Persistence::Finder] '>')?;
	public FinderUserMethodElements getFinderUserMethodAccess() {
		return pFinderUserMethod;
	}
	
	public ParserRule getFinderUserMethodRule() {
		return getFinderUserMethodAccess().getRule();
	}
	
	//MethodSimpleReturn:
	//	returnType=SimpleReturnType name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')';
	public MethodSimpleReturnElements getMethodSimpleReturnAccess() {
		return pMethodSimpleReturn;
	}
	
	public ParserRule getMethodSimpleReturnRule() {
		return getMethodSimpleReturnAccess().getRule();
	}
	
	//MethodAllModelReturn:
	//	returnType=[Model::AllModelType] name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')';
	public MethodAllModelReturnElements getMethodAllModelReturnAccess() {
		return pMethodAllModelReturn;
	}
	
	public ParserRule getMethodAllModelReturnRule() {
		return getMethodAllModelReturnAccess().getRule();
	}
	
	//MethodDtoReturn:
	//	'#' returnType=[Dto::Dto] name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')';
	public MethodDtoReturnElements getMethodDtoReturnAccess() {
		return pMethodDtoReturn;
	}
	
	public ParserRule getMethodDtoReturnRule() {
		return getMethodDtoReturnAccess().getRule();
	}
	
	//MethodCollectionReturn:
	//	returnType=CollectionReturnType name=ID '(' (parameters+=DefVariable (',' parameters+=DefVariable)*)? ')';
	public MethodCollectionReturnElements getMethodCollectionReturnAccess() {
		return pMethodCollectionReturn;
	}
	
	public ParserRule getMethodCollectionReturnRule() {
		return getMethodCollectionReturnAccess().getRule();
	}
	
	//// Variables soportadas para los métodos
	//DefVariable:
	//	DefSimpleVariable | DefAllModelTypeVariable | DefDtoTypeVariable | DefCollectionTypeVariable;
	public DefVariableElements getDefVariableAccess() {
		return pDefVariable;
	}
	
	public ParserRule getDefVariableRule() {
		return getDefVariableAccess().getRule();
	}
	
	//DefAllModelTypeVariable:
	//	type=[Model::AllModelType] name=ID;
	public DefAllModelTypeVariableElements getDefAllModelTypeVariableAccess() {
		return pDefAllModelTypeVariable;
	}
	
	public ParserRule getDefAllModelTypeVariableRule() {
		return getDefAllModelTypeVariableAccess().getRule();
	}
	
	//DefDtoTypeVariable:
	//	'#' type=[Dto::Dto] name=ID;
	public DefDtoTypeVariableElements getDefDtoTypeVariableAccess() {
		return pDefDtoTypeVariable;
	}
	
	public ParserRule getDefDtoTypeVariableRule() {
		return getDefDtoTypeVariableAccess().getRule();
	}
	
	//DefSimpleVariable:
	//	type=Type name=ID;
	public DefSimpleVariableElements getDefSimpleVariableAccess() {
		return pDefSimpleVariable;
	}
	
	public ParserRule getDefSimpleVariableRule() {
		return getDefSimpleVariableAccess().getRule();
	}
	
	//DefCollectionTypeVariable:
	//	DefAllModelTypeCollectionVariable | DefDtoTypeCollectionVariable | DefSimpleTypeCollectionVariable;
	public DefCollectionTypeVariableElements getDefCollectionTypeVariableAccess() {
		return pDefCollectionTypeVariable;
	}
	
	public ParserRule getDefCollectionTypeVariableRule() {
		return getDefCollectionTypeVariableAccess().getRule();
	}
	
	//DefAllModelTypeCollectionVariable:
	//	type=AllModelTypeCollection name=ID;
	public DefAllModelTypeCollectionVariableElements getDefAllModelTypeCollectionVariableAccess() {
		return pDefAllModelTypeCollectionVariable;
	}
	
	public ParserRule getDefAllModelTypeCollectionVariableRule() {
		return getDefAllModelTypeCollectionVariableAccess().getRule();
	}
	
	//DefSimpleTypeCollectionVariable:
	//	type=SimpleTypeCollection name=ID;
	public DefSimpleTypeCollectionVariableElements getDefSimpleTypeCollectionVariableAccess() {
		return pDefSimpleTypeCollectionVariable;
	}
	
	public ParserRule getDefSimpleTypeCollectionVariableRule() {
		return getDefSimpleTypeCollectionVariableAccess().getRule();
	}
	
	//DefDtoTypeCollectionVariable:
	//	type=DtoTypeCollection name=ID;
	public DefDtoTypeCollectionVariableElements getDefDtoTypeCollectionVariableAccess() {
		return pDefDtoTypeCollectionVariable;
	}
	
	public ParserRule getDefDtoTypeCollectionVariableRule() {
		return getDefDtoTypeCollectionVariableAccess().getRule();
	}
	
	//// Tipos de colección
	//CollectionReturnType:
	//	AllModelTypeCollection | DtoTypeCollection | SimpleTypeCollection;
	public CollectionReturnTypeElements getCollectionReturnTypeAccess() {
		return pCollectionReturnType;
	}
	
	public ParserRule getCollectionReturnTypeRule() {
		return getCollectionReturnTypeAccess().getRule();
	}
	
	//AllModelTypeCollection:
	//	collection=(LIST | SET) '<' type=[Model::AllModelType] '>';
	public AllModelTypeCollectionElements getAllModelTypeCollectionAccess() {
		return pAllModelTypeCollection;
	}
	
	public ParserRule getAllModelTypeCollectionRule() {
		return getAllModelTypeCollectionAccess().getRule();
	}
	
	//DtoTypeCollection:
	//	collection=(LIST | SET) '<' '#' type=[Dto::Dto] '>';
	public DtoTypeCollectionElements getDtoTypeCollectionAccess() {
		return pDtoTypeCollection;
	}
	
	public ParserRule getDtoTypeCollectionRule() {
		return getDtoTypeCollectionAccess().getRule();
	}
	
	//SimpleTypeCollection:
	//	collection=(LIST | SET) '<' type=Type '>';
	public SimpleTypeCollectionElements getSimpleTypeCollectionAccess() {
		return pSimpleTypeCollection;
	}
	
	public ParserRule getSimpleTypeCollectionRule() {
		return getSimpleTypeCollectionAccess().getRule();
	}
	
	////Tipos simples (básicos) y complejos (Date) soportados
	//SimpleReturnType:
	//	Type | VOID;
	public SimpleReturnTypeElements getSimpleReturnTypeAccess() {
		return pSimpleReturnType;
	}
	
	public ParserRule getSimpleReturnTypeRule() {
		return getSimpleReturnTypeAccess().getRule();
	}
	
	//Type:
	//	BasicType | ComplexType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//BasicType:
	//	TYPE_INT | TYPE_DOUBLE | TYPE_FLOAT | TYPE_LONG | TYPE_CHAR | TYPE_STRING | TYPE_BOOLEAN | TYPE_BINARY;
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//ComplexType:
	//	DATE;
	public ComplexTypeElements getComplexTypeAccess() {
		return pComplexType;
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}
	
	//terminal LIST:
	//	'List';
	public TerminalRule getLISTRule() {
		return tLIST;
	}
	
	//terminal SET:
	//	'Set';
	public TerminalRule getSETRule() {
		return tSET;
	}
	
	//terminal DATE:
	//	'Date';
	public TerminalRule getDATERule() {
		return tDATE;
	}
	
	//terminal VOID:
	//	'void';
	public TerminalRule getVOIDRule() {
		return tVOID;
	}
	
	//terminal TYPE_INT:
	//	'Integer';
	public TerminalRule getTYPE_INTRule() {
		return tTYPE_INT;
	}
	
	//terminal TYPE_LONG:
	//	'Long';
	public TerminalRule getTYPE_LONGRule() {
		return tTYPE_LONG;
	}
	
	//terminal TYPE_DOUBLE:
	//	'Double';
	public TerminalRule getTYPE_DOUBLERule() {
		return tTYPE_DOUBLE;
	}
	
	//terminal TYPE_FLOAT:
	//	'Float';
	public TerminalRule getTYPE_FLOATRule() {
		return tTYPE_FLOAT;
	}
	
	//terminal TYPE_CHAR:
	//	'Character';
	public TerminalRule getTYPE_CHARRule() {
		return tTYPE_CHAR;
	}
	
	//terminal TYPE_STRING:
	//	'String';
	public TerminalRule getTYPE_STRINGRule() {
		return tTYPE_STRING;
	}
	
	//terminal TYPE_BOOLEAN:
	//	'Boolean';
	public TerminalRule getTYPE_BOOLEANRule() {
		return tTYPE_BOOLEAN;
	}
	
	//terminal TYPE_BINARY:
	//	'Binary';
	public TerminalRule getTYPE_BINARYRule() {
		return tTYPE_BINARY;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
