/*
 * generated by Xtext 2.9.0
 */
package uo.diesels.model.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DtoDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.Model");
		private final Assignment cDtosAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDtosDtoParserRuleCall_0 = (RuleCall)cDtosAssignment.eContents().get(0);
		
		//Model:
		//	dtos+=Dto*;
		@Override public ParserRule getRule() { return rule; }
		
		//dtos+=Dto*
		public Assignment getDtosAssignment() { return cDtosAssignment; }
		
		//Dto
		public RuleCall getDtosDtoParserRuleCall_0() { return cDtosDtoParserRuleCall_0; }
	}
	public class DtoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.Dto");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDtoEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDtoForParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Dto:
		//	DtoEntity | DtoFor;
		@Override public ParserRule getRule() { return rule; }
		
		//DtoEntity | DtoFor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DtoEntity
		public RuleCall getDtoEntityParserRuleCall_0() { return cDtoEntityParserRuleCall_0; }
		
		//DtoFor
		public RuleCall getDtoForParserRuleCall_1() { return cDtoForParserRuleCall_1; }
	}
	public class DtoEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.DtoEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDtoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesDefDtoAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DtoEntity:
		//	'Dto' name=ID '{'
		//	attributes+=DefDtoAttribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Dto' name=ID '{' attributes+=DefDtoAttribute* '}'
		public Group getGroup() { return cGroup; }
		
		//'Dto'
		public Keyword getDtoKeyword_0() { return cDtoKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=DefDtoAttribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//DefDtoAttribute
		public RuleCall getAttributesDefDtoAttributeParserRuleCall_3_0() { return cAttributesDefDtoAttributeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DtoForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.DtoFor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDtoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntityEntityCrossReference_3_0 = (CrossReference)cEntityAssignment_3.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cEntityEntityCrossReference_3_0.eContents().get(1);
		
		//DtoFor:
		//	'Dto' name=ID 'for' entity=[Model::Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//'Dto' name=ID 'for' entity=[Model::Entity]
		public Group getGroup() { return cGroup; }
		
		//'Dto'
		public Keyword getDtoKeyword_0() { return cDtoKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'for'
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//entity=[Model::Entity]
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }
		
		//[Model::Entity]
		public CrossReference getEntityEntityCrossReference_3_0() { return cEntityEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_3_0_1() { return cEntityEntityIDTerminalRuleCall_3_0_1; }
	}
	public class DefDtoAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.DefDtoAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefDtoSimpleVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefDtoModelTypeVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefDtoCollectionTypeAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DefDtoAttribute:
		//	DefDtoSimpleVariable | DefDtoModelTypeVariable | DefDtoCollectionTypeAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//DefDtoSimpleVariable | DefDtoModelTypeVariable | DefDtoCollectionTypeAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefDtoSimpleVariable
		public RuleCall getDefDtoSimpleVariableParserRuleCall_0() { return cDefDtoSimpleVariableParserRuleCall_0; }
		
		//DefDtoModelTypeVariable
		public RuleCall getDefDtoModelTypeVariableParserRuleCall_1() { return cDefDtoModelTypeVariableParserRuleCall_1; }
		
		//DefDtoCollectionTypeAttribute
		public RuleCall getDefDtoCollectionTypeAttributeParserRuleCall_2() { return cDefDtoCollectionTypeAttributeParserRuleCall_2; }
	}
	public class DefDtoSimpleVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.DefDtoSimpleVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DefDtoSimpleVariable:
		//	type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DefDtoModelTypeVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.DefDtoModelTypeVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeModelTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeModelTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeModelTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DefDtoModelTypeVariable:
		//	type=[Model::ModelType] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Model::ModelType] name=ID
		public Group getGroup() { return cGroup; }
		
		//type=[Model::ModelType]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[Model::ModelType]
		public CrossReference getTypeModelTypeCrossReference_0_0() { return cTypeModelTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeModelTypeIDTerminalRuleCall_0_0_1() { return cTypeModelTypeIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DefDtoCollectionTypeAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.DefDtoCollectionTypeAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefDtoModelTypeCollectionVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefDtoSimpleTypeCollectionVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DefDtoCollectionTypeAttribute:
		//	DefDtoModelTypeCollectionVariable | DefDtoSimpleTypeCollectionVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//DefDtoModelTypeCollectionVariable | DefDtoSimpleTypeCollectionVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefDtoModelTypeCollectionVariable
		public RuleCall getDefDtoModelTypeCollectionVariableParserRuleCall_0() { return cDefDtoModelTypeCollectionVariableParserRuleCall_0; }
		
		//DefDtoSimpleTypeCollectionVariable
		public RuleCall getDefDtoSimpleTypeCollectionVariableParserRuleCall_1() { return cDefDtoSimpleTypeCollectionVariableParserRuleCall_1; }
	}
	public class DefDtoModelTypeCollectionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.DefDtoModelTypeCollectionVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCollectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCollectionAlternatives_0_0 = (Alternatives)cCollectionAssignment_0.eContents().get(0);
		private final RuleCall cCollectionLISTTerminalRuleCall_0_0_0 = (RuleCall)cCollectionAlternatives_0_0.eContents().get(0);
		private final RuleCall cCollectionSETTerminalRuleCall_0_0_1 = (RuleCall)cCollectionAlternatives_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeModelTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeModelTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeModelTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//DefDtoModelTypeCollectionVariable:
		//	collection=(LIST | SET) '<' type=[Model::ModelType] '>' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//collection=(LIST | SET) '<' type=[Model::ModelType] '>' name=ID
		public Group getGroup() { return cGroup; }
		
		//collection=(LIST | SET)
		public Assignment getCollectionAssignment_0() { return cCollectionAssignment_0; }
		
		//(LIST | SET)
		public Alternatives getCollectionAlternatives_0_0() { return cCollectionAlternatives_0_0; }
		
		//LIST
		public RuleCall getCollectionLISTTerminalRuleCall_0_0_0() { return cCollectionLISTTerminalRuleCall_0_0_0; }
		
		//SET
		public RuleCall getCollectionSETTerminalRuleCall_0_0_1() { return cCollectionSETTerminalRuleCall_0_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//type=[Model::ModelType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Model::ModelType]
		public CrossReference getTypeModelTypeCrossReference_2_0() { return cTypeModelTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeModelTypeIDTerminalRuleCall_2_0_1() { return cTypeModelTypeIDTerminalRuleCall_2_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}
	public class DefDtoSimpleTypeCollectionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.DefDtoSimpleTypeCollectionVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCollectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCollectionAlternatives_0_0 = (Alternatives)cCollectionAssignment_0.eContents().get(0);
		private final RuleCall cCollectionLISTTerminalRuleCall_0_0_0 = (RuleCall)cCollectionAlternatives_0_0.eContents().get(0);
		private final RuleCall cCollectionSETTerminalRuleCall_0_0_1 = (RuleCall)cCollectionAlternatives_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//DefDtoSimpleTypeCollectionVariable:
		//	collection=(LIST | SET) '<' type=Type '>' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//collection=(LIST | SET) '<' type=Type '>' name=ID
		public Group getGroup() { return cGroup; }
		
		//collection=(LIST | SET)
		public Assignment getCollectionAssignment_0() { return cCollectionAssignment_0; }
		
		//(LIST | SET)
		public Alternatives getCollectionAlternatives_0_0() { return cCollectionAlternatives_0_0; }
		
		//LIST
		public RuleCall getCollectionLISTTerminalRuleCall_0_0_0() { return cCollectionLISTTerminalRuleCall_0_0_0; }
		
		//SET
		public RuleCall getCollectionSETTerminalRuleCall_0_0_1() { return cCollectionSETTerminalRuleCall_0_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	BasicType | ComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicType | ComplexType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }
		
		//ComplexType
		public RuleCall getComplexTypeParserRuleCall_1() { return cComplexTypeParserRuleCall_1; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTYPE_INTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTYPE_DOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTYPE_FLOATTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTYPE_LONGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTYPE_CHARTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTYPE_STRINGTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTYPE_BOOLEANTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//BasicType:
		//	TYPE_INT | TYPE_DOUBLE | TYPE_FLOAT | TYPE_LONG | TYPE_CHAR | TYPE_STRING | TYPE_BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//TYPE_INT | TYPE_DOUBLE | TYPE_FLOAT | TYPE_LONG | TYPE_CHAR | TYPE_STRING | TYPE_BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TYPE_INT
		public RuleCall getTYPE_INTTerminalRuleCall_0() { return cTYPE_INTTerminalRuleCall_0; }
		
		//TYPE_DOUBLE
		public RuleCall getTYPE_DOUBLETerminalRuleCall_1() { return cTYPE_DOUBLETerminalRuleCall_1; }
		
		//TYPE_FLOAT
		public RuleCall getTYPE_FLOATTerminalRuleCall_2() { return cTYPE_FLOATTerminalRuleCall_2; }
		
		//TYPE_LONG
		public RuleCall getTYPE_LONGTerminalRuleCall_3() { return cTYPE_LONGTerminalRuleCall_3; }
		
		//TYPE_CHAR
		public RuleCall getTYPE_CHARTerminalRuleCall_4() { return cTYPE_CHARTerminalRuleCall_4; }
		
		//TYPE_STRING
		public RuleCall getTYPE_STRINGTerminalRuleCall_5() { return cTYPE_STRINGTerminalRuleCall_5; }
		
		//TYPE_BOOLEAN
		public RuleCall getTYPE_BOOLEANTerminalRuleCall_6() { return cTYPE_BOOLEANTerminalRuleCall_6; }
	}
	public class ComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.ComplexType");
		private final RuleCall cDATETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ComplexType:
		//	DATE;
		@Override public ParserRule getRule() { return rule; }
		
		//DATE
		public RuleCall getDATETerminalRuleCall() { return cDATETerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final DtoElements pDto;
	private final DtoEntityElements pDtoEntity;
	private final DtoForElements pDtoFor;
	private final DefDtoAttributeElements pDefDtoAttribute;
	private final DefDtoSimpleVariableElements pDefDtoSimpleVariable;
	private final DefDtoModelTypeVariableElements pDefDtoModelTypeVariable;
	private final DefDtoCollectionTypeAttributeElements pDefDtoCollectionTypeAttribute;
	private final DefDtoModelTypeCollectionVariableElements pDefDtoModelTypeCollectionVariable;
	private final DefDtoSimpleTypeCollectionVariableElements pDefDtoSimpleTypeCollectionVariable;
	private final TypeElements pType;
	private final BasicTypeElements pBasicType;
	private final ComplexTypeElements pComplexType;
	private final TerminalRule tLIST;
	private final TerminalRule tSET;
	private final TerminalRule tDATE;
	private final TerminalRule tTYPE_INT;
	private final TerminalRule tTYPE_LONG;
	private final TerminalRule tTYPE_DOUBLE;
	private final TerminalRule tTYPE_FLOAT;
	private final TerminalRule tTYPE_CHAR;
	private final TerminalRule tTYPE_STRING;
	private final TerminalRule tTYPE_BOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DtoDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDto = new DtoElements();
		this.pDtoEntity = new DtoEntityElements();
		this.pDtoFor = new DtoForElements();
		this.pDefDtoAttribute = new DefDtoAttributeElements();
		this.pDefDtoSimpleVariable = new DefDtoSimpleVariableElements();
		this.pDefDtoModelTypeVariable = new DefDtoModelTypeVariableElements();
		this.pDefDtoCollectionTypeAttribute = new DefDtoCollectionTypeAttributeElements();
		this.pDefDtoModelTypeCollectionVariable = new DefDtoModelTypeCollectionVariableElements();
		this.pDefDtoSimpleTypeCollectionVariable = new DefDtoSimpleTypeCollectionVariableElements();
		this.pType = new TypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pComplexType = new ComplexTypeElements();
		this.tLIST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.LIST");
		this.tSET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.SET");
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.DATE");
		this.tTYPE_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.TYPE_INT");
		this.tTYPE_LONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.TYPE_LONG");
		this.tTYPE_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.TYPE_DOUBLE");
		this.tTYPE_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.TYPE_FLOAT");
		this.tTYPE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.TYPE_CHAR");
		this.tTYPE_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.TYPE_STRING");
		this.tTYPE_BOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uo.diesels.model.DtoDsl.TYPE_BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uo.diesels.model.DtoDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	dtos+=Dto*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Dto:
	//	DtoEntity | DtoFor;
	public DtoElements getDtoAccess() {
		return pDto;
	}
	
	public ParserRule getDtoRule() {
		return getDtoAccess().getRule();
	}
	
	//DtoEntity:
	//	'Dto' name=ID '{'
	//	attributes+=DefDtoAttribute*
	//	'}';
	public DtoEntityElements getDtoEntityAccess() {
		return pDtoEntity;
	}
	
	public ParserRule getDtoEntityRule() {
		return getDtoEntityAccess().getRule();
	}
	
	//DtoFor:
	//	'Dto' name=ID 'for' entity=[Model::Entity];
	public DtoForElements getDtoForAccess() {
		return pDtoFor;
	}
	
	public ParserRule getDtoForRule() {
		return getDtoForAccess().getRule();
	}
	
	//DefDtoAttribute:
	//	DefDtoSimpleVariable | DefDtoModelTypeVariable | DefDtoCollectionTypeAttribute;
	public DefDtoAttributeElements getDefDtoAttributeAccess() {
		return pDefDtoAttribute;
	}
	
	public ParserRule getDefDtoAttributeRule() {
		return getDefDtoAttributeAccess().getRule();
	}
	
	//DefDtoSimpleVariable:
	//	type=Type name=ID;
	public DefDtoSimpleVariableElements getDefDtoSimpleVariableAccess() {
		return pDefDtoSimpleVariable;
	}
	
	public ParserRule getDefDtoSimpleVariableRule() {
		return getDefDtoSimpleVariableAccess().getRule();
	}
	
	//DefDtoModelTypeVariable:
	//	type=[Model::ModelType] name=ID;
	public DefDtoModelTypeVariableElements getDefDtoModelTypeVariableAccess() {
		return pDefDtoModelTypeVariable;
	}
	
	public ParserRule getDefDtoModelTypeVariableRule() {
		return getDefDtoModelTypeVariableAccess().getRule();
	}
	
	//DefDtoCollectionTypeAttribute:
	//	DefDtoModelTypeCollectionVariable | DefDtoSimpleTypeCollectionVariable;
	public DefDtoCollectionTypeAttributeElements getDefDtoCollectionTypeAttributeAccess() {
		return pDefDtoCollectionTypeAttribute;
	}
	
	public ParserRule getDefDtoCollectionTypeAttributeRule() {
		return getDefDtoCollectionTypeAttributeAccess().getRule();
	}
	
	//DefDtoModelTypeCollectionVariable:
	//	collection=(LIST | SET) '<' type=[Model::ModelType] '>' name=ID;
	public DefDtoModelTypeCollectionVariableElements getDefDtoModelTypeCollectionVariableAccess() {
		return pDefDtoModelTypeCollectionVariable;
	}
	
	public ParserRule getDefDtoModelTypeCollectionVariableRule() {
		return getDefDtoModelTypeCollectionVariableAccess().getRule();
	}
	
	//DefDtoSimpleTypeCollectionVariable:
	//	collection=(LIST | SET) '<' type=Type '>' name=ID;
	public DefDtoSimpleTypeCollectionVariableElements getDefDtoSimpleTypeCollectionVariableAccess() {
		return pDefDtoSimpleTypeCollectionVariable;
	}
	
	public ParserRule getDefDtoSimpleTypeCollectionVariableRule() {
		return getDefDtoSimpleTypeCollectionVariableAccess().getRule();
	}
	
	//Type:
	//	BasicType | ComplexType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//BasicType:
	//	TYPE_INT | TYPE_DOUBLE | TYPE_FLOAT | TYPE_LONG | TYPE_CHAR | TYPE_STRING | TYPE_BOOLEAN;
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//ComplexType:
	//	DATE;
	public ComplexTypeElements getComplexTypeAccess() {
		return pComplexType;
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}
	
	//terminal LIST:
	//	'List';
	public TerminalRule getLISTRule() {
		return tLIST;
	}
	
	//terminal SET:
	//	'Set';
	public TerminalRule getSETRule() {
		return tSET;
	}
	
	//terminal DATE:
	//	'Date';
	public TerminalRule getDATERule() {
		return tDATE;
	}
	
	//terminal TYPE_INT:
	//	'Integer';
	public TerminalRule getTYPE_INTRule() {
		return tTYPE_INT;
	}
	
	//terminal TYPE_LONG:
	//	'Long';
	public TerminalRule getTYPE_LONGRule() {
		return tTYPE_LONG;
	}
	
	//terminal TYPE_DOUBLE:
	//	'Double';
	public TerminalRule getTYPE_DOUBLERule() {
		return tTYPE_DOUBLE;
	}
	
	//terminal TYPE_FLOAT:
	//	'Float';
	public TerminalRule getTYPE_FLOATRule() {
		return tTYPE_FLOAT;
	}
	
	//terminal TYPE_CHAR:
	//	'Character';
	public TerminalRule getTYPE_CHARRule() {
		return tTYPE_CHAR;
	}
	
	//terminal TYPE_STRING:
	//	'String';
	public TerminalRule getTYPE_STRINGRule() {
		return tTYPE_STRING;
	}
	
	//terminal TYPE_BOOLEAN:
	//	'Boolean';
	public TerminalRule getTYPE_BOOLEANRule() {
		return tTYPE_BOOLEAN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
