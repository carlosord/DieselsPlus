/*
 * generated by Xtext 2.10.0
 */
grammar InternalDtoDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uo.diesels.model.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uo.diesels.model.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uo.diesels.model.services.DtoDslGrammarAccess;

}

@parser::members {

 	private DtoDslGrammarAccess grammarAccess;

    public InternalDtoDslParser(TokenStream input, DtoDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DtoDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getDtosDtoParserRuleCall_0());
			}
			lv_dtos_0_0=ruleDto
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"dtos",
					lv_dtos_0_0,
					"uo.diesels.model.DtoDsl.Dto");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleDto
entryRuleDto returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDtoRule()); }
	iv_ruleDto=ruleDto
	{ $current=$iv_ruleDto.current; }
	EOF;

// Rule Dto
ruleDto returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDtoAccess().getDtoEntityParserRuleCall_0());
		}
		this_DtoEntity_0=ruleDtoEntity
		{
			$current = $this_DtoEntity_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDtoAccess().getDtoForParserRuleCall_1());
		}
		this_DtoFor_1=ruleDtoFor
		{
			$current = $this_DtoFor_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDtoEntity
entryRuleDtoEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDtoEntityRule()); }
	iv_ruleDtoEntity=ruleDtoEntity
	{ $current=$iv_ruleDtoEntity.current; }
	EOF;

// Rule DtoEntity
ruleDtoEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Dto'
		{
			newLeafNode(otherlv_0, grammarAccess.getDtoEntityAccess().getDtoKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDtoEntityAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDtoEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDtoEntityAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDtoEntityAccess().getAttributesDefDtoAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleDefDtoAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDtoEntityRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"uo.diesels.model.DtoDsl.DefDtoAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getDtoEntityAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDtoFor
entryRuleDtoFor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDtoForRule()); }
	iv_ruleDtoFor=ruleDtoFor
	{ $current=$iv_ruleDtoFor.current; }
	EOF;

// Rule DtoFor
ruleDtoFor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Dto'
		{
			newLeafNode(otherlv_0, grammarAccess.getDtoForAccess().getDtoKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDtoForAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDtoForRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='for'
		{
			newLeafNode(otherlv_2, grammarAccess.getDtoForAccess().getForKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDtoForRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDtoForAccess().getEntityEntityCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleDefDtoAttribute
entryRuleDefDtoAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefDtoAttributeRule()); }
	iv_ruleDefDtoAttribute=ruleDefDtoAttribute
	{ $current=$iv_ruleDefDtoAttribute.current; }
	EOF;

// Rule DefDtoAttribute
ruleDefDtoAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDefDtoAttributeAccess().getDefDtoSimpleVariableParserRuleCall_0());
		}
		this_DefDtoSimpleVariable_0=ruleDefDtoSimpleVariable
		{
			$current = $this_DefDtoSimpleVariable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefDtoAttributeAccess().getDefDtoModelTypeVariableParserRuleCall_1());
		}
		this_DefDtoModelTypeVariable_1=ruleDefDtoModelTypeVariable
		{
			$current = $this_DefDtoModelTypeVariable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefDtoAttributeAccess().getDefDtoCollectionTypeAttributeParserRuleCall_2());
		}
		this_DefDtoCollectionTypeAttribute_2=ruleDefDtoCollectionTypeAttribute
		{
			$current = $this_DefDtoCollectionTypeAttribute_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefDtoSimpleVariable
entryRuleDefDtoSimpleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefDtoSimpleVariableRule()); }
	iv_ruleDefDtoSimpleVariable=ruleDefDtoSimpleVariable
	{ $current=$iv_ruleDefDtoSimpleVariable.current; }
	EOF;

// Rule DefDtoSimpleVariable
ruleDefDtoSimpleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDefDtoSimpleVariableAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefDtoSimpleVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"uo.diesels.model.DtoDsl.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDefDtoSimpleVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefDtoSimpleVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleDefDtoModelTypeVariable
entryRuleDefDtoModelTypeVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefDtoModelTypeVariableRule()); }
	iv_ruleDefDtoModelTypeVariable=ruleDefDtoModelTypeVariable
	{ $current=$iv_ruleDefDtoModelTypeVariable.current; }
	EOF;

// Rule DefDtoModelTypeVariable
ruleDefDtoModelTypeVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefDtoModelTypeVariableRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getDefDtoModelTypeVariableAccess().getTypeModelTypeCrossReference_0_0());
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDefDtoModelTypeVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefDtoModelTypeVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleDefDtoCollectionTypeAttribute
entryRuleDefDtoCollectionTypeAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefDtoCollectionTypeAttributeRule()); }
	iv_ruleDefDtoCollectionTypeAttribute=ruleDefDtoCollectionTypeAttribute
	{ $current=$iv_ruleDefDtoCollectionTypeAttribute.current; }
	EOF;

// Rule DefDtoCollectionTypeAttribute
ruleDefDtoCollectionTypeAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDefDtoCollectionTypeAttributeAccess().getDefDtoModelTypeCollectionVariableParserRuleCall_0());
		}
		this_DefDtoModelTypeCollectionVariable_0=ruleDefDtoModelTypeCollectionVariable
		{
			$current = $this_DefDtoModelTypeCollectionVariable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefDtoCollectionTypeAttributeAccess().getDefDtoSimpleTypeCollectionVariableParserRuleCall_1());
		}
		this_DefDtoSimpleTypeCollectionVariable_1=ruleDefDtoSimpleTypeCollectionVariable
		{
			$current = $this_DefDtoSimpleTypeCollectionVariable_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefDtoModelTypeCollectionVariable
entryRuleDefDtoModelTypeCollectionVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefDtoModelTypeCollectionVariableRule()); }
	iv_ruleDefDtoModelTypeCollectionVariable=ruleDefDtoModelTypeCollectionVariable
	{ $current=$iv_ruleDefDtoModelTypeCollectionVariable.current; }
	EOF;

// Rule DefDtoModelTypeCollectionVariable
ruleDefDtoModelTypeCollectionVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_collection_0_1=RULE_LIST
					{
						newLeafNode(lv_collection_0_1, grammarAccess.getDefDtoModelTypeCollectionVariableAccess().getCollectionLISTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDefDtoModelTypeCollectionVariableRule());
						}
						setWithLastConsumed(
							$current,
							"collection",
							lv_collection_0_1,
							"uo.diesels.model.DtoDsl.LIST");
					}
					    |
					lv_collection_0_2=RULE_SET
					{
						newLeafNode(lv_collection_0_2, grammarAccess.getDefDtoModelTypeCollectionVariableAccess().getCollectionSETTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDefDtoModelTypeCollectionVariableRule());
						}
						setWithLastConsumed(
							$current,
							"collection",
							lv_collection_0_2,
							"uo.diesels.model.DtoDsl.SET");
					}
				)
			)
		)
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefDtoModelTypeCollectionVariableAccess().getLessThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefDtoModelTypeCollectionVariableRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getDefDtoModelTypeCollectionVariableAccess().getTypeModelTypeCrossReference_2_0());
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getDefDtoModelTypeCollectionVariableAccess().getGreaterThanSignKeyword_3());
		}
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getDefDtoModelTypeCollectionVariableAccess().getNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefDtoModelTypeCollectionVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleDefDtoSimpleTypeCollectionVariable
entryRuleDefDtoSimpleTypeCollectionVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefDtoSimpleTypeCollectionVariableRule()); }
	iv_ruleDefDtoSimpleTypeCollectionVariable=ruleDefDtoSimpleTypeCollectionVariable
	{ $current=$iv_ruleDefDtoSimpleTypeCollectionVariable.current; }
	EOF;

// Rule DefDtoSimpleTypeCollectionVariable
ruleDefDtoSimpleTypeCollectionVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_collection_0_1=RULE_LIST
					{
						newLeafNode(lv_collection_0_1, grammarAccess.getDefDtoSimpleTypeCollectionVariableAccess().getCollectionLISTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDefDtoSimpleTypeCollectionVariableRule());
						}
						setWithLastConsumed(
							$current,
							"collection",
							lv_collection_0_1,
							"uo.diesels.model.DtoDsl.LIST");
					}
					    |
					lv_collection_0_2=RULE_SET
					{
						newLeafNode(lv_collection_0_2, grammarAccess.getDefDtoSimpleTypeCollectionVariableAccess().getCollectionSETTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDefDtoSimpleTypeCollectionVariableRule());
						}
						setWithLastConsumed(
							$current,
							"collection",
							lv_collection_0_2,
							"uo.diesels.model.DtoDsl.SET");
					}
				)
			)
		)
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefDtoSimpleTypeCollectionVariableAccess().getLessThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefDtoSimpleTypeCollectionVariableAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefDtoSimpleTypeCollectionVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"uo.diesels.model.DtoDsl.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getDefDtoSimpleTypeCollectionVariableAccess().getGreaterThanSignKeyword_3());
		}
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getDefDtoSimpleTypeCollectionVariableAccess().getNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefDtoSimpleTypeCollectionVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getBasicTypeParserRuleCall_0());
		}
		this_BasicType_0=ruleBasicType
		{
			$current.merge(this_BasicType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getComplexTypeParserRuleCall_1());
		}
		this_ComplexType_1=ruleComplexType
		{
			$current.merge(this_ComplexType_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBasicType
entryRuleBasicType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	iv_ruleBasicType=ruleBasicType
	{ $current=$iv_ruleBasicType.current.getText(); }
	EOF;

// Rule BasicType
ruleBasicType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TYPE_INT_0=RULE_TYPE_INT
		{
			$current.merge(this_TYPE_INT_0);
		}
		{
			newLeafNode(this_TYPE_INT_0, grammarAccess.getBasicTypeAccess().getTYPE_INTTerminalRuleCall_0());
		}
		    |
		this_TYPE_DOUBLE_1=RULE_TYPE_DOUBLE
		{
			$current.merge(this_TYPE_DOUBLE_1);
		}
		{
			newLeafNode(this_TYPE_DOUBLE_1, grammarAccess.getBasicTypeAccess().getTYPE_DOUBLETerminalRuleCall_1());
		}
		    |
		this_TYPE_FLOAT_2=RULE_TYPE_FLOAT
		{
			$current.merge(this_TYPE_FLOAT_2);
		}
		{
			newLeafNode(this_TYPE_FLOAT_2, grammarAccess.getBasicTypeAccess().getTYPE_FLOATTerminalRuleCall_2());
		}
		    |
		this_TYPE_LONG_3=RULE_TYPE_LONG
		{
			$current.merge(this_TYPE_LONG_3);
		}
		{
			newLeafNode(this_TYPE_LONG_3, grammarAccess.getBasicTypeAccess().getTYPE_LONGTerminalRuleCall_3());
		}
		    |
		this_TYPE_CHAR_4=RULE_TYPE_CHAR
		{
			$current.merge(this_TYPE_CHAR_4);
		}
		{
			newLeafNode(this_TYPE_CHAR_4, grammarAccess.getBasicTypeAccess().getTYPE_CHARTerminalRuleCall_4());
		}
		    |
		this_TYPE_STRING_5=RULE_TYPE_STRING
		{
			$current.merge(this_TYPE_STRING_5);
		}
		{
			newLeafNode(this_TYPE_STRING_5, grammarAccess.getBasicTypeAccess().getTYPE_STRINGTerminalRuleCall_5());
		}
		    |
		this_TYPE_BOOLEAN_6=RULE_TYPE_BOOLEAN
		{
			$current.merge(this_TYPE_BOOLEAN_6);
		}
		{
			newLeafNode(this_TYPE_BOOLEAN_6, grammarAccess.getBasicTypeAccess().getTYPE_BOOLEANTerminalRuleCall_6());
		}
		    |
		this_TYPE_BINARY_7=RULE_TYPE_BINARY
		{
			$current.merge(this_TYPE_BINARY_7);
		}
		{
			newLeafNode(this_TYPE_BINARY_7, grammarAccess.getBasicTypeAccess().getTYPE_BINARYTerminalRuleCall_7());
		}
	)
;

// Entry rule entryRuleComplexType
entryRuleComplexType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComplexTypeRule()); }
	iv_ruleComplexType=ruleComplexType
	{ $current=$iv_ruleComplexType.current.getText(); }
	EOF;

// Rule ComplexType
ruleComplexType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_DATE_0=RULE_DATE
	{
		$current.merge(this_DATE_0);
	}
	{
		newLeafNode(this_DATE_0, grammarAccess.getComplexTypeAccess().getDATETerminalRuleCall());
	}
;

RULE_LIST : 'List';

RULE_SET : 'Set';

RULE_DATE : 'Date';

RULE_TYPE_INT : 'Integer';

RULE_TYPE_LONG : 'Long';

RULE_TYPE_DOUBLE : 'Double';

RULE_TYPE_FLOAT : 'Float';

RULE_TYPE_CHAR : 'Character';

RULE_TYPE_STRING : 'String';

RULE_TYPE_BOOLEAN : 'Boolean';

RULE_TYPE_BINARY : 'Binary';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
