/**
 * generated by Xtext 2.9.0
 */
package uo.diesels.model.modelDsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import uo.diesels.model.modelDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see uo.diesels.model.modelDsl.ModelDslPackage
 * @generated
 */
public class ModelDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ModelDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ModelDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelDslSwitch<Adapter> modelSwitch =
    new ModelDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseAllModelType(AllModelType object)
      {
        return createAllModelTypeAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseModelType(ModelType object)
      {
        return createModelTypeAdapter();
      }
      @Override
      public Adapter caseLink(Link object)
      {
        return createLinkAdapter();
      }
      @Override
      public Adapter caseSimpleEntity(SimpleEntity object)
      {
        return createSimpleEntityAdapter();
      }
      @Override
      public Adapter caseAssociativeEntity(AssociativeEntity object)
      {
        return createAssociativeEntityAdapter();
      }
      @Override
      public Adapter caseValueType(ValueType object)
      {
        return createValueTypeAdapter();
      }
      @Override
      public Adapter caseEnumerable(Enumerable object)
      {
        return createEnumerableAdapter();
      }
      @Override
      public Adapter caseSimpleLink(SimpleLink object)
      {
        return createSimpleLinkAdapter();
      }
      @Override
      public Adapter caseRelation(Relation object)
      {
        return createRelationAdapter();
      }
      @Override
      public Adapter caseDefAttribute(DefAttribute object)
      {
        return createDefAttributeAdapter();
      }
      @Override
      public Adapter caseDefVariable(DefVariable object)
      {
        return createDefVariableAdapter();
      }
      @Override
      public Adapter caseDefIdAttribute(DefIdAttribute object)
      {
        return createDefIdAttributeAdapter();
      }
      @Override
      public Adapter caseDefAllModelTypeVariable(DefAllModelTypeVariable object)
      {
        return createDefAllModelTypeVariableAdapter();
      }
      @Override
      public Adapter caseDefSimpleVariable(DefSimpleVariable object)
      {
        return createDefSimpleVariableAdapter();
      }
      @Override
      public Adapter caseDefModelTypeVariable(DefModelTypeVariable object)
      {
        return createDefModelTypeVariableAdapter();
      }
      @Override
      public Adapter caseDefCollectionTypeAttribute(DefCollectionTypeAttribute object)
      {
        return createDefCollectionTypeAttributeAdapter();
      }
      @Override
      public Adapter caseDefCollectionTypeVariable(DefCollectionTypeVariable object)
      {
        return createDefCollectionTypeVariableAdapter();
      }
      @Override
      public Adapter caseDefModelModelTypeCollectionVariable(DefModelModelTypeCollectionVariable object)
      {
        return createDefModelModelTypeCollectionVariableAdapter();
      }
      @Override
      public Adapter caseDefModelSimpleTypeCollectionVariable(DefModelSimpleTypeCollectionVariable object)
      {
        return createDefModelSimpleTypeCollectionVariableAdapter();
      }
      @Override
      public Adapter caseDefLinkVariable(DefLinkVariable object)
      {
        return createDefLinkVariableAdapter();
      }
      @Override
      public Adapter caseMethod(Method object)
      {
        return createMethodAdapter();
      }
      @Override
      public Adapter caseMethodSimpleReturn(MethodSimpleReturn object)
      {
        return createMethodSimpleReturnAdapter();
      }
      @Override
      public Adapter caseMethodCollectionReturn(MethodCollectionReturn object)
      {
        return createMethodCollectionReturnAdapter();
      }
      @Override
      public Adapter caseMethodAllModelReturn(MethodAllModelReturn object)
      {
        return createMethodAllModelReturnAdapter();
      }
      @Override
      public Adapter caseAllModelTypeCollection(AllModelTypeCollection object)
      {
        return createAllModelTypeCollectionAdapter();
      }
      @Override
      public Adapter caseModelTypeCollection(ModelTypeCollection object)
      {
        return createModelTypeCollectionAdapter();
      }
      @Override
      public Adapter caseSimpleTypeCollection(SimpleTypeCollection object)
      {
        return createSimpleTypeCollectionAdapter();
      }
      @Override
      public Adapter caseCollectionReturnType(CollectionReturnType object)
      {
        return createCollectionReturnTypeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.AllModelType <em>All Model Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.AllModelType
   * @generated
   */
  public Adapter createAllModelTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.ModelType <em>Model Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.ModelType
   * @generated
   */
  public Adapter createModelTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.Link <em>Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.Link
   * @generated
   */
  public Adapter createLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.SimpleEntity <em>Simple Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.SimpleEntity
   * @generated
   */
  public Adapter createSimpleEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.AssociativeEntity <em>Associative Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.AssociativeEntity
   * @generated
   */
  public Adapter createAssociativeEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.ValueType <em>Value Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.ValueType
   * @generated
   */
  public Adapter createValueTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.Enumerable <em>Enumerable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.Enumerable
   * @generated
   */
  public Adapter createEnumerableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.SimpleLink <em>Simple Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.SimpleLink
   * @generated
   */
  public Adapter createSimpleLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.Relation <em>Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.Relation
   * @generated
   */
  public Adapter createRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.DefAttribute <em>Def Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.DefAttribute
   * @generated
   */
  public Adapter createDefAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.DefVariable <em>Def Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.DefVariable
   * @generated
   */
  public Adapter createDefVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.DefIdAttribute <em>Def Id Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.DefIdAttribute
   * @generated
   */
  public Adapter createDefIdAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.DefAllModelTypeVariable <em>Def All Model Type Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.DefAllModelTypeVariable
   * @generated
   */
  public Adapter createDefAllModelTypeVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.DefSimpleVariable <em>Def Simple Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.DefSimpleVariable
   * @generated
   */
  public Adapter createDefSimpleVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.DefModelTypeVariable <em>Def Model Type Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.DefModelTypeVariable
   * @generated
   */
  public Adapter createDefModelTypeVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.DefCollectionTypeAttribute <em>Def Collection Type Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.DefCollectionTypeAttribute
   * @generated
   */
  public Adapter createDefCollectionTypeAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.DefCollectionTypeVariable <em>Def Collection Type Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.DefCollectionTypeVariable
   * @generated
   */
  public Adapter createDefCollectionTypeVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.DefModelModelTypeCollectionVariable <em>Def Model Model Type Collection Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.DefModelModelTypeCollectionVariable
   * @generated
   */
  public Adapter createDefModelModelTypeCollectionVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.DefModelSimpleTypeCollectionVariable <em>Def Model Simple Type Collection Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.DefModelSimpleTypeCollectionVariable
   * @generated
   */
  public Adapter createDefModelSimpleTypeCollectionVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.DefLinkVariable <em>Def Link Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.DefLinkVariable
   * @generated
   */
  public Adapter createDefLinkVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.Method <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.Method
   * @generated
   */
  public Adapter createMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.MethodSimpleReturn <em>Method Simple Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.MethodSimpleReturn
   * @generated
   */
  public Adapter createMethodSimpleReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.MethodCollectionReturn <em>Method Collection Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.MethodCollectionReturn
   * @generated
   */
  public Adapter createMethodCollectionReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.MethodAllModelReturn <em>Method All Model Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.MethodAllModelReturn
   * @generated
   */
  public Adapter createMethodAllModelReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.AllModelTypeCollection <em>All Model Type Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.AllModelTypeCollection
   * @generated
   */
  public Adapter createAllModelTypeCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.ModelTypeCollection <em>Model Type Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.ModelTypeCollection
   * @generated
   */
  public Adapter createModelTypeCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.SimpleTypeCollection <em>Simple Type Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.SimpleTypeCollection
   * @generated
   */
  public Adapter createSimpleTypeCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.modelDsl.CollectionReturnType <em>Collection Return Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.modelDsl.CollectionReturnType
   * @generated
   */
  public Adapter createCollectionReturnTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ModelDslAdapterFactory
