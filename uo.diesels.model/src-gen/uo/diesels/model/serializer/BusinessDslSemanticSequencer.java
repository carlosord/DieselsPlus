/*
 * generated by Xtext 2.10.0
 */
package uo.diesels.model.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uo.diesels.model.businessDsl.AllModelTypeCollection;
import uo.diesels.model.businessDsl.BusinessDslPackage;
import uo.diesels.model.businessDsl.DefAllModelTypeCollectionVariable;
import uo.diesels.model.businessDsl.DefAllModelTypeVariable;
import uo.diesels.model.businessDsl.DefDtoTypeCollectionVariable;
import uo.diesels.model.businessDsl.DefDtoTypeVariable;
import uo.diesels.model.businessDsl.DefSimpleTypeCollectionVariable;
import uo.diesels.model.businessDsl.DefSimpleVariable;
import uo.diesels.model.businessDsl.DtoTypeCollection;
import uo.diesels.model.businessDsl.JpaMethod;
import uo.diesels.model.businessDsl.MethodAllModelReturn;
import uo.diesels.model.businessDsl.MethodCollectionReturn;
import uo.diesels.model.businessDsl.MethodDtoReturn;
import uo.diesels.model.businessDsl.MethodSimpleReturn;
import uo.diesels.model.businessDsl.Model;
import uo.diesels.model.businessDsl.Service;
import uo.diesels.model.businessDsl.SimpleTypeCollection;
import uo.diesels.model.services.BusinessDslGrammarAccess;

@SuppressWarnings("all")
public class BusinessDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BusinessDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BusinessDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BusinessDslPackage.ALL_MODEL_TYPE_COLLECTION:
				sequence_AllModelTypeCollection(context, (AllModelTypeCollection) semanticObject); 
				return; 
			case BusinessDslPackage.DEF_ALL_MODEL_TYPE_COLLECTION_VARIABLE:
				sequence_DefAllModelTypeCollectionVariable(context, (DefAllModelTypeCollectionVariable) semanticObject); 
				return; 
			case BusinessDslPackage.DEF_ALL_MODEL_TYPE_VARIABLE:
				sequence_DefAllModelTypeVariable(context, (DefAllModelTypeVariable) semanticObject); 
				return; 
			case BusinessDslPackage.DEF_DTO_TYPE_COLLECTION_VARIABLE:
				sequence_DefDtoTypeCollectionVariable(context, (DefDtoTypeCollectionVariable) semanticObject); 
				return; 
			case BusinessDslPackage.DEF_DTO_TYPE_VARIABLE:
				sequence_DefDtoTypeVariable(context, (DefDtoTypeVariable) semanticObject); 
				return; 
			case BusinessDslPackage.DEF_SIMPLE_TYPE_COLLECTION_VARIABLE:
				sequence_DefSimpleTypeCollectionVariable(context, (DefSimpleTypeCollectionVariable) semanticObject); 
				return; 
			case BusinessDslPackage.DEF_SIMPLE_VARIABLE:
				sequence_DefSimpleVariable(context, (DefSimpleVariable) semanticObject); 
				return; 
			case BusinessDslPackage.DTO_TYPE_COLLECTION:
				sequence_DtoTypeCollection(context, (DtoTypeCollection) semanticObject); 
				return; 
			case BusinessDslPackage.JPA_METHOD:
				sequence_JpaMethod(context, (JpaMethod) semanticObject); 
				return; 
			case BusinessDslPackage.METHOD_ALL_MODEL_RETURN:
				if (rule == grammarAccess.getServiceMethodRule()
						|| rule == grammarAccess.getFinderUserMethodRule()) {
					sequence_FinderUserMethod_MethodAllModelReturn(context, (MethodAllModelReturn) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMethodAllModelReturnRule()) {
					sequence_MethodAllModelReturn(context, (MethodAllModelReturn) semanticObject); 
					return; 
				}
				else break;
			case BusinessDslPackage.METHOD_COLLECTION_RETURN:
				if (rule == grammarAccess.getServiceMethodRule()
						|| rule == grammarAccess.getFinderUserMethodRule()) {
					sequence_FinderUserMethod_MethodCollectionReturn(context, (MethodCollectionReturn) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMethodCollectionReturnRule()) {
					sequence_MethodCollectionReturn(context, (MethodCollectionReturn) semanticObject); 
					return; 
				}
				else break;
			case BusinessDslPackage.METHOD_DTO_RETURN:
				if (rule == grammarAccess.getServiceMethodRule()
						|| rule == grammarAccess.getFinderUserMethodRule()) {
					sequence_FinderUserMethod_MethodDtoReturn(context, (MethodDtoReturn) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMethodDtoReturnRule()) {
					sequence_MethodDtoReturn(context, (MethodDtoReturn) semanticObject); 
					return; 
				}
				else break;
			case BusinessDslPackage.METHOD_SIMPLE_RETURN:
				if (rule == grammarAccess.getServiceMethodRule()
						|| rule == grammarAccess.getFinderUserMethodRule()) {
					sequence_FinderUserMethod_MethodSimpleReturn(context, (MethodSimpleReturn) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMethodSimpleReturnRule()) {
					sequence_MethodSimpleReturn(context, (MethodSimpleReturn) semanticObject); 
					return; 
				}
				else break;
			case BusinessDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BusinessDslPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case BusinessDslPackage.SIMPLE_TYPE_COLLECTION:
				sequence_SimpleTypeCollection(context, (SimpleTypeCollection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CollectionReturnType returns AllModelTypeCollection
	 *     AllModelTypeCollection returns AllModelTypeCollection
	 *
	 * Constraint:
	 *     ((collection=LIST | collection=SET) type=[AllModelType|ID])
	 */
	protected void sequence_AllModelTypeCollection(ISerializationContext context, AllModelTypeCollection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefVariable returns DefAllModelTypeCollectionVariable
	 *     DefCollectionTypeVariable returns DefAllModelTypeCollectionVariable
	 *     DefAllModelTypeCollectionVariable returns DefAllModelTypeCollectionVariable
	 *
	 * Constraint:
	 *     (type=AllModelTypeCollection name=ID)
	 */
	protected void sequence_DefAllModelTypeCollectionVariable(ISerializationContext context, DefAllModelTypeCollectionVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_ALL_MODEL_TYPE_COLLECTION_VARIABLE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_ALL_MODEL_TYPE_COLLECTION_VARIABLE__TYPE));
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefAllModelTypeCollectionVariableAccess().getTypeAllModelTypeCollectionParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDefAllModelTypeCollectionVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DefVariable returns DefAllModelTypeVariable
	 *     DefAllModelTypeVariable returns DefAllModelTypeVariable
	 *
	 * Constraint:
	 *     (type=[AllModelType|ID] name=ID)
	 */
	protected void sequence_DefAllModelTypeVariable(ISerializationContext context, DefAllModelTypeVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_ALL_MODEL_TYPE_VARIABLE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_ALL_MODEL_TYPE_VARIABLE__TYPE));
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefAllModelTypeVariableAccess().getTypeAllModelTypeIDTerminalRuleCall_0_0_1(), semanticObject.getType());
		feeder.accept(grammarAccess.getDefAllModelTypeVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DefVariable returns DefDtoTypeCollectionVariable
	 *     DefCollectionTypeVariable returns DefDtoTypeCollectionVariable
	 *     DefDtoTypeCollectionVariable returns DefDtoTypeCollectionVariable
	 *
	 * Constraint:
	 *     (type=DtoTypeCollection name=ID)
	 */
	protected void sequence_DefDtoTypeCollectionVariable(ISerializationContext context, DefDtoTypeCollectionVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_DTO_TYPE_COLLECTION_VARIABLE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_DTO_TYPE_COLLECTION_VARIABLE__TYPE));
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefDtoTypeCollectionVariableAccess().getTypeDtoTypeCollectionParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDefDtoTypeCollectionVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DefVariable returns DefDtoTypeVariable
	 *     DefDtoTypeVariable returns DefDtoTypeVariable
	 *
	 * Constraint:
	 *     (type=[Dto|ID] name=ID)
	 */
	protected void sequence_DefDtoTypeVariable(ISerializationContext context, DefDtoTypeVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_DTO_TYPE_VARIABLE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_DTO_TYPE_VARIABLE__TYPE));
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefDtoTypeVariableAccess().getTypeDtoIDTerminalRuleCall_1_0_1(), semanticObject.getType());
		feeder.accept(grammarAccess.getDefDtoTypeVariableAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DefVariable returns DefSimpleTypeCollectionVariable
	 *     DefCollectionTypeVariable returns DefSimpleTypeCollectionVariable
	 *     DefSimpleTypeCollectionVariable returns DefSimpleTypeCollectionVariable
	 *
	 * Constraint:
	 *     (type=SimpleTypeCollection name=ID)
	 */
	protected void sequence_DefSimpleTypeCollectionVariable(ISerializationContext context, DefSimpleTypeCollectionVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_SIMPLE_TYPE_COLLECTION_VARIABLE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_SIMPLE_TYPE_COLLECTION_VARIABLE__TYPE));
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefSimpleTypeCollectionVariableAccess().getTypeSimpleTypeCollectionParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDefSimpleTypeCollectionVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DefVariable returns DefSimpleVariable
	 *     DefSimpleVariable returns DefSimpleVariable
	 *
	 * Constraint:
	 *     (type=Type name=ID)
	 */
	protected void sequence_DefSimpleVariable(ISerializationContext context, DefSimpleVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_SIMPLE_VARIABLE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_SIMPLE_VARIABLE__TYPE));
			if (transientValues.isValueTransient(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BusinessDslPackage.Literals.DEF_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefSimpleVariableAccess().getTypeTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDefSimpleVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CollectionReturnType returns DtoTypeCollection
	 *     DtoTypeCollection returns DtoTypeCollection
	 *
	 * Constraint:
	 *     ((collection=LIST | collection=SET) type=[Dto|ID])
	 */
	protected void sequence_DtoTypeCollection(ISerializationContext context, DtoTypeCollection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServiceMethod returns MethodAllModelReturn
	 *     FinderUserMethod returns MethodAllModelReturn
	 *
	 * Constraint:
	 *     (returnType=[AllModelType|ID] name=ID (parameters+=DefVariable parameters+=DefVariable*)? (keyword='finder' finder=[Finder|ID])?)
	 */
	protected void sequence_FinderUserMethod_MethodAllModelReturn(ISerializationContext context, MethodAllModelReturn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServiceMethod returns MethodCollectionReturn
	 *     FinderUserMethod returns MethodCollectionReturn
	 *
	 * Constraint:
	 *     (returnType=CollectionReturnType name=ID (parameters+=DefVariable parameters+=DefVariable*)? (keyword='finder' finder=[Finder|ID])?)
	 */
	protected void sequence_FinderUserMethod_MethodCollectionReturn(ISerializationContext context, MethodCollectionReturn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServiceMethod returns MethodDtoReturn
	 *     FinderUserMethod returns MethodDtoReturn
	 *
	 * Constraint:
	 *     (returnType=[Dto|ID] name=ID (parameters+=DefVariable parameters+=DefVariable*)? (keyword='finder' finder=[Finder|ID])?)
	 */
	protected void sequence_FinderUserMethod_MethodDtoReturn(ISerializationContext context, MethodDtoReturn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServiceMethod returns MethodSimpleReturn
	 *     FinderUserMethod returns MethodSimpleReturn
	 *
	 * Constraint:
	 *     (returnType=SimpleReturnType name=ID (parameters+=DefVariable parameters+=DefVariable*)? (keyword='finder' finder=[Finder|ID])?)
	 */
	protected void sequence_FinderUserMethod_MethodSimpleReturn(ISerializationContext context, MethodSimpleReturn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServiceMethod returns JpaMethod
	 *     JpaMethod returns JpaMethod
	 *
	 * Constraint:
	 *     (name=ID (keyword='save' | keyword='update' | keyword='delete' | keyword='find') entity=[Entity|ID])
	 */
	protected void sequence_JpaMethod(ISerializationContext context, JpaMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MethodAllModelReturn returns MethodAllModelReturn
	 *
	 * Constraint:
	 *     (returnType=[AllModelType|ID] name=ID (parameters+=DefVariable parameters+=DefVariable*)?)
	 */
	protected void sequence_MethodAllModelReturn(ISerializationContext context, MethodAllModelReturn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MethodCollectionReturn returns MethodCollectionReturn
	 *
	 * Constraint:
	 *     (returnType=CollectionReturnType name=ID (parameters+=DefVariable parameters+=DefVariable*)?)
	 */
	protected void sequence_MethodCollectionReturn(ISerializationContext context, MethodCollectionReturn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MethodDtoReturn returns MethodDtoReturn
	 *
	 * Constraint:
	 *     (returnType=[Dto|ID] name=ID (parameters+=DefVariable parameters+=DefVariable*)?)
	 */
	protected void sequence_MethodDtoReturn(ISerializationContext context, MethodDtoReturn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MethodSimpleReturn returns MethodSimpleReturn
	 *
	 * Constraint:
	 *     (returnType=SimpleReturnType name=ID (parameters+=DefVariable parameters+=DefVariable*)?)
	 */
	protected void sequence_MethodSimpleReturn(ISerializationContext context, MethodSimpleReturn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     services+=Service+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (name=ID methods+=ServiceMethod+)
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CollectionReturnType returns SimpleTypeCollection
	 *     SimpleTypeCollection returns SimpleTypeCollection
	 *
	 * Constraint:
	 *     ((collection=LIST | collection=SET) type=Type)
	 */
	protected void sequence_SimpleTypeCollection(ISerializationContext context, SimpleTypeCollection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
