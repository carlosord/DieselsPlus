/*
 * generated by Xtext 2.10.0
 */
package uo.diesels.model.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uo.diesels.model.dtoDsl.DefDtoModelTypeCollectionVariable;
import uo.diesels.model.dtoDsl.DefDtoModelTypeVariable;
import uo.diesels.model.dtoDsl.DefDtoSimpleTypeCollectionVariable;
import uo.diesels.model.dtoDsl.DefDtoSimpleVariable;
import uo.diesels.model.dtoDsl.DtoDslPackage;
import uo.diesels.model.dtoDsl.DtoEntity;
import uo.diesels.model.dtoDsl.DtoFor;
import uo.diesels.model.dtoDsl.Model;
import uo.diesels.model.services.DtoDslGrammarAccess;

@SuppressWarnings("all")
public class DtoDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DtoDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DtoDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DtoDslPackage.DEF_DTO_MODEL_TYPE_COLLECTION_VARIABLE:
				sequence_DefDtoModelTypeCollectionVariable(context, (DefDtoModelTypeCollectionVariable) semanticObject); 
				return; 
			case DtoDslPackage.DEF_DTO_MODEL_TYPE_VARIABLE:
				sequence_DefDtoModelTypeVariable(context, (DefDtoModelTypeVariable) semanticObject); 
				return; 
			case DtoDslPackage.DEF_DTO_SIMPLE_TYPE_COLLECTION_VARIABLE:
				sequence_DefDtoSimpleTypeCollectionVariable(context, (DefDtoSimpleTypeCollectionVariable) semanticObject); 
				return; 
			case DtoDslPackage.DEF_DTO_SIMPLE_VARIABLE:
				sequence_DefDtoSimpleVariable(context, (DefDtoSimpleVariable) semanticObject); 
				return; 
			case DtoDslPackage.DTO_ENTITY:
				sequence_DtoEntity(context, (DtoEntity) semanticObject); 
				return; 
			case DtoDslPackage.DTO_FOR:
				sequence_DtoFor(context, (DtoFor) semanticObject); 
				return; 
			case DtoDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DefDtoAttribute returns DefDtoModelTypeCollectionVariable
	 *     DefDtoCollectionTypeAttribute returns DefDtoModelTypeCollectionVariable
	 *     DefDtoModelTypeCollectionVariable returns DefDtoModelTypeCollectionVariable
	 *
	 * Constraint:
	 *     ((collection=LIST | collection=SET) type=[ModelType|ID] name=ID)
	 */
	protected void sequence_DefDtoModelTypeCollectionVariable(ISerializationContext context, DefDtoModelTypeCollectionVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefDtoAttribute returns DefDtoModelTypeVariable
	 *     DefDtoModelTypeVariable returns DefDtoModelTypeVariable
	 *
	 * Constraint:
	 *     (type=[ModelType|ID] name=ID)
	 */
	protected void sequence_DefDtoModelTypeVariable(ISerializationContext context, DefDtoModelTypeVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DtoDslPackage.Literals.DEF_DTO_MODEL_TYPE_VARIABLE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DtoDslPackage.Literals.DEF_DTO_MODEL_TYPE_VARIABLE__TYPE));
			if (transientValues.isValueTransient(semanticObject, DtoDslPackage.Literals.DEF_DTO_ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DtoDslPackage.Literals.DEF_DTO_ATTRIBUTE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefDtoModelTypeVariableAccess().getTypeModelTypeIDTerminalRuleCall_0_0_1(), semanticObject.getType());
		feeder.accept(grammarAccess.getDefDtoModelTypeVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DefDtoAttribute returns DefDtoSimpleTypeCollectionVariable
	 *     DefDtoCollectionTypeAttribute returns DefDtoSimpleTypeCollectionVariable
	 *     DefDtoSimpleTypeCollectionVariable returns DefDtoSimpleTypeCollectionVariable
	 *
	 * Constraint:
	 *     ((collection=LIST | collection=SET) type=Type name=ID)
	 */
	protected void sequence_DefDtoSimpleTypeCollectionVariable(ISerializationContext context, DefDtoSimpleTypeCollectionVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefDtoAttribute returns DefDtoSimpleVariable
	 *     DefDtoSimpleVariable returns DefDtoSimpleVariable
	 *
	 * Constraint:
	 *     (type=Type name=ID)
	 */
	protected void sequence_DefDtoSimpleVariable(ISerializationContext context, DefDtoSimpleVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DtoDslPackage.Literals.DEF_DTO_SIMPLE_VARIABLE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DtoDslPackage.Literals.DEF_DTO_SIMPLE_VARIABLE__TYPE));
			if (transientValues.isValueTransient(semanticObject, DtoDslPackage.Literals.DEF_DTO_ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DtoDslPackage.Literals.DEF_DTO_ATTRIBUTE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefDtoSimpleVariableAccess().getTypeTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDefDtoSimpleVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Dto returns DtoEntity
	 *     DtoEntity returns DtoEntity
	 *
	 * Constraint:
	 *     (name=ID attributes+=DefDtoAttribute*)
	 */
	protected void sequence_DtoEntity(ISerializationContext context, DtoEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dto returns DtoFor
	 *     DtoFor returns DtoFor
	 *
	 * Constraint:
	 *     (name=ID entity=[Entity|ID])
	 */
	protected void sequence_DtoFor(ISerializationContext context, DtoFor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DtoDslPackage.Literals.DTO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DtoDslPackage.Literals.DTO__NAME));
			if (transientValues.isValueTransient(semanticObject, DtoDslPackage.Literals.DTO_FOR__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DtoDslPackage.Literals.DTO_FOR__ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDtoForAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDtoForAccess().getEntityEntityIDTerminalRuleCall_3_0_1(), semanticObject.getEntity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     dtos+=Dto+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
