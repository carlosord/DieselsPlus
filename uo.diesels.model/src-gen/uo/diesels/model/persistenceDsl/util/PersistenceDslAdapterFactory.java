/**
 * generated by Xtext 2.10.0
 */
package uo.diesels.model.persistenceDsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import uo.diesels.model.persistenceDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see uo.diesels.model.persistenceDsl.PersistenceDslPackage
 * @generated
 */
public class PersistenceDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static PersistenceDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PersistenceDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = PersistenceDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PersistenceDslSwitch<Adapter> modelSwitch =
    new PersistenceDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseFinder(Finder object)
      {
        return createFinderAdapter();
      }
      @Override
      public Adapter caseFinderMethod(FinderMethod object)
      {
        return createFinderMethodAdapter();
      }
      @Override
      public Adapter caseMethodSimpleReturn(MethodSimpleReturn object)
      {
        return createMethodSimpleReturnAdapter();
      }
      @Override
      public Adapter caseMethodEntityReturn(MethodEntityReturn object)
      {
        return createMethodEntityReturnAdapter();
      }
      @Override
      public Adapter caseMethodDtoReturn(MethodDtoReturn object)
      {
        return createMethodDtoReturnAdapter();
      }
      @Override
      public Adapter caseMethodCollectionReturn(MethodCollectionReturn object)
      {
        return createMethodCollectionReturnAdapter();
      }
      @Override
      public Adapter caseCollectionReturnType(CollectionReturnType object)
      {
        return createCollectionReturnTypeAdapter();
      }
      @Override
      public Adapter caseEntityReturnTypeCollection(EntityReturnTypeCollection object)
      {
        return createEntityReturnTypeCollectionAdapter();
      }
      @Override
      public Adapter caseDtoReturnTypeCollection(DtoReturnTypeCollection object)
      {
        return createDtoReturnTypeCollectionAdapter();
      }
      @Override
      public Adapter caseSimpleReturnTypeCollection(SimpleReturnTypeCollection object)
      {
        return createSimpleReturnTypeCollectionAdapter();
      }
      @Override
      public Adapter caseAllModelTypeCollection(AllModelTypeCollection object)
      {
        return createAllModelTypeCollectionAdapter();
      }
      @Override
      public Adapter caseSimpleTypeCollection(SimpleTypeCollection object)
      {
        return createSimpleTypeCollectionAdapter();
      }
      @Override
      public Adapter caseDefVariable(DefVariable object)
      {
        return createDefVariableAdapter();
      }
      @Override
      public Adapter caseDefAllModelTypeVariable(DefAllModelTypeVariable object)
      {
        return createDefAllModelTypeVariableAdapter();
      }
      @Override
      public Adapter caseDefSimpleVariable(DefSimpleVariable object)
      {
        return createDefSimpleVariableAdapter();
      }
      @Override
      public Adapter caseDefCollectionTypeVariable(DefCollectionTypeVariable object)
      {
        return createDefCollectionTypeVariableAdapter();
      }
      @Override
      public Adapter caseDefAllModelTypeCollectionVariable(DefAllModelTypeCollectionVariable object)
      {
        return createDefAllModelTypeCollectionVariableAdapter();
      }
      @Override
      public Adapter caseDefSimpleTypeCollectionVariable(DefSimpleTypeCollectionVariable object)
      {
        return createDefSimpleTypeCollectionVariableAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.Finder <em>Finder</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.Finder
   * @generated
   */
  public Adapter createFinderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.FinderMethod <em>Finder Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.FinderMethod
   * @generated
   */
  public Adapter createFinderMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.MethodSimpleReturn <em>Method Simple Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.MethodSimpleReturn
   * @generated
   */
  public Adapter createMethodSimpleReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.MethodEntityReturn <em>Method Entity Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.MethodEntityReturn
   * @generated
   */
  public Adapter createMethodEntityReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.MethodDtoReturn <em>Method Dto Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.MethodDtoReturn
   * @generated
   */
  public Adapter createMethodDtoReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.MethodCollectionReturn <em>Method Collection Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.MethodCollectionReturn
   * @generated
   */
  public Adapter createMethodCollectionReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.CollectionReturnType <em>Collection Return Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.CollectionReturnType
   * @generated
   */
  public Adapter createCollectionReturnTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.EntityReturnTypeCollection <em>Entity Return Type Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.EntityReturnTypeCollection
   * @generated
   */
  public Adapter createEntityReturnTypeCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.DtoReturnTypeCollection <em>Dto Return Type Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.DtoReturnTypeCollection
   * @generated
   */
  public Adapter createDtoReturnTypeCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.SimpleReturnTypeCollection <em>Simple Return Type Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.SimpleReturnTypeCollection
   * @generated
   */
  public Adapter createSimpleReturnTypeCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.AllModelTypeCollection <em>All Model Type Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.AllModelTypeCollection
   * @generated
   */
  public Adapter createAllModelTypeCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.SimpleTypeCollection <em>Simple Type Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.SimpleTypeCollection
   * @generated
   */
  public Adapter createSimpleTypeCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.DefVariable <em>Def Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.DefVariable
   * @generated
   */
  public Adapter createDefVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.DefAllModelTypeVariable <em>Def All Model Type Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.DefAllModelTypeVariable
   * @generated
   */
  public Adapter createDefAllModelTypeVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.DefSimpleVariable <em>Def Simple Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.DefSimpleVariable
   * @generated
   */
  public Adapter createDefSimpleVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.DefCollectionTypeVariable <em>Def Collection Type Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.DefCollectionTypeVariable
   * @generated
   */
  public Adapter createDefCollectionTypeVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.DefAllModelTypeCollectionVariable <em>Def All Model Type Collection Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.DefAllModelTypeCollectionVariable
   * @generated
   */
  public Adapter createDefAllModelTypeCollectionVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uo.diesels.model.persistenceDsl.DefSimpleTypeCollectionVariable <em>Def Simple Type Collection Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uo.diesels.model.persistenceDsl.DefSimpleTypeCollectionVariable
   * @generated
   */
  public Adapter createDefSimpleTypeCollectionVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //PersistenceDslAdapterFactory
