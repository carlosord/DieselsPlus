/*
 * generated by Xtext 2.9.0
 */
package uo.diesels.model.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uo.diesels.model.generator.business.ServiceFactoryGenerator
import uo.diesels.model.generator.business.ServiceImplGenerator
import uo.diesels.model.generator.business.ServiceInterfaceGenerator
import uo.diesels.model.generator.util.ResourceUtils

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BusinessDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var project = ResourceUtils.obtainGroupArtifactName(resource);
		
		generateServiceInterfaceGenerator(resource, fsa, project);
		generateServiceImplGenerator(resource, fsa, project);
		generateServiceFactory(resource, fsa, project);
	}
	
	def generateServiceInterfaceGenerator(Resource resource, IFileSystemAccess2 fsa, String project) {
		var serviceInterfaceGenerator = new ServiceInterfaceGenerator(resource, fsa, project);
		serviceInterfaceGenerator.compile();
	}
	
	def generateServiceImplGenerator(Resource resource, IFileSystemAccess2 fsa, String project) {
		var serviceImplGenerator = new ServiceImplGenerator(resource, fsa, project);
		serviceImplGenerator.compile();
	}
	
	def generateServiceFactory(Resource resource, IFileSystemAccess2 fsa, String project) {
		var serviceFactoryGenerator = new ServiceFactoryGenerator(resource, fsa, project);
		serviceFactoryGenerator.compile();
	}
	
}
